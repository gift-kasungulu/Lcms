@page "/casedetails/{caseId:int}"
@attribute [Authorize(Roles = "Client")]

@using System.IO
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@using LegalCaseManagement.Service
@using LegalCaseManagement.Domain
@using LegalCaseManagement.Data
@using LegalCaseManagement.Data.LegalServices
@using Microsoft.EntityFrameworkCore
@inject IServiceScopeFactory ServiceScopeFactory
@inject IJSRuntime JSRuntime

<MudText Typo="Typo.h5">Case</MudText>
<MudSpacer />

<div class="my-2">
    <MudIconButton Icon="@Icons.Material.Filled.FileDownload" Color="Color.Primary" />
    <MudIconButton Icon="@Icons.Material.Filled.Print" Color="Color.Primary" />
</div>

@if (caseDetails == null)
{
    <div class="centered">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </div>
}
else
{
    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
        <MudTabPanel Text="Detail">
            <MudGrid>
                <MudItem xs="12">
                    <MudText Typo="Typo.h6" Class="mb-4">Case Detail</MudText>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTable Items="@GetLeftColumnDetails()" Dense="true" Hover="true" Elevation="0">
                        <HeaderContent>
                            <MudTh Style="width:40%"></MudTh>
                            <MudTh Style="width:60%"></MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Label">@context.Label</MudTd>
                            <MudTd DataLabel="Value">@context.Value</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudTable Items="@GetRightColumnDetails()" Dense="true" Hover="true" Elevation="0">
                        <HeaderContent>
                            <MudTh Style="width:40%"></MudTh>
                            <MudTh Style="width:60%"></MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Label">@context.Label</MudTd>
                            <MudTd DataLabel="Value">@context.Value</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudItem>
                <MudItem xs="12">
                    <MudText Typo="Typo.body2" Class="mt-4">
                        <strong>Description:</strong> @caseDetails.Discription
                    </MudText>
                </MudItem>
                <MudItem xs="12">
                    <MudText Typo="Typo.body2" Class="mt-4">
                        <strong>File Attachment:</strong> @(string.IsNullOrEmpty(caseDetails.FileAttachment) ? "No file attached" : caseDetails.FileAttachment)
                    </MudText>
                </MudItem>
            </MudGrid>
            <MudDivider Class="my-6" />
            <MudGrid>
                <MudItem xs="12" sm="6">
                    <MudText Typo="Typo.h6" Class="mb-4">Petitioner and Advocate</MudText>
                    <MudText Typo="Typo.body1">@caseDetails.Petitioner</MudText>
                    <MudText Typo="Typo.body1">N/A</MudText>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudText Typo="Typo.h6" Class="mb-4">Client and Advocate</MudText>
                    <MudText Typo="Typo.body1">Client: @caseDetails.AppUser?.FirstName @caseDetails.AppUser?.LastName</MudText>
                    <MudText Typo="Typo.body1">Advocate: @(caseDetails.AssignedLawyer != null ? $"{caseDetails.AssignedLawyer.FirstName} {caseDetails.AssignedLawyer.LastName}" : "Not assigned")</MudText>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudText Typo="Typo.h6" Class="mb-4">Court Name</MudText>
                    <MudText Typo="Typo.body1">@caseDetails.Defendant</MudText>
                </MudItem>
            </MudGrid>
            <br />
            <MudDivider Class="my-6" />
            <MudItem xs="12">
                <MudText Typo="Typo.h6" Class="mb-4">Upload Case Documents</MudText>
                <InputFile OnChange="OnFileChange" />
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="UploadFiles" Disabled="@(!selectedFiles.Any())" Class="mt-2">
                    Upload Documents
                </MudButton>
            </MudItem>
            <MudItem xs="12" Class="mt-4">
                <MudText Typo="Typo.h6" Class="mb-2">Uploaded Documents</MudText>
                @if (caseDocuments.Any())
                {
                    <MudGrid>
                        @foreach (var doc in caseDocuments)
                        {
                            <MudItem xs="12">
                                <MudPaper Class="pa-4" Style="width: 100%;">
                                    <MudGrid>
                                        <MudItem xs="1">
                                            <MudIconButton Icon="@Icons.Material.Filled.PictureAsPdf" Color="Color.Secondary" />
                                        </MudItem>
                                        <MudItem xs="9">
                                            <MudText>@doc.FileName</MudText>
                                            <MudText Typo="Typo.caption" Class="text-muted">@doc.UploadDate.ToString("dd MMM yyyy")</MudText>
                                        </MudItem>
                                        <MudItem xs="2">
                                            <MudIconButton Icon="@Icons.Material.Filled.Download" Color="Color.Primary" OnClick="@(() => DownloadDocument(doc.Id))" />
                                        </MudItem>
                                    </MudGrid>
                                </MudPaper>
                            </MudItem>
                        }
                    </MudGrid>
                }
                else
                {
                    <MudText>No documents uploaded yet.</MudText>
                }
            </MudItem>
        </MudTabPanel>
        <MudTabPanel Text="History">
            <MudText>History content goes here</MudText>
        </MudTabPanel>
    </MudTabs>
}

@code {
    [Parameter] public int CaseId { get; set; }
    private Case caseDetails;
    private IReadOnlyList<IBrowserFile> selectedFiles = new List<IBrowserFile>();
    private List<CaseDocument> caseDocuments = new List<CaseDocument>();

    protected override async Task OnInitializedAsync()
    {
        caseDetails = await GetCaseDetailsAsync(CaseId);
        caseDocuments = await GetCaseDocumentsAsync(CaseId);
    }

    private async Task<Case> GetCaseDetailsAsync(int caseId)
    {
        using (var scope = ServiceScopeFactory.CreateScope())
        {
            var context = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
            return await context.Cases
                .Include(c => c.CaseStatus)
                .Include(c => c.CaseType)
                .Include(c => c.AppUser)
                .Include(c => c.AssignedLawyer)
                .FirstOrDefaultAsync(c => c.CaseId == caseId);
        }
    }

    private List<(string Label, string Value)> GetLeftColumnDetails()
    {
        return new List<(string, string)>
        {
            ("Case Category", caseDetails.CaseType?.TypeName ?? "N/A"),
            ("Registration No", caseDetails.RegistrationNo ?? "N/A"),
            ("Registration Date", caseDetails.RegistrationDate?.ToString("dd-MM-yyyy") ?? "N/A"),
            ("Name", caseDetails.AppUser?.FirstName  ?? "N/A")
        };
    }

    private List<(string Label, string Value)> GetRightColumnDetails()
    {
        return new List<(string, string)>
        {
            ("First Hearing Date", caseDetails.StartDate?.ToString("dd-MM-yyyy") ?? "N/A"),
            ("Next Hearing Date", caseDetails.EndDate?.ToString("dd-MM-yyyy") ?? "N/A"),
            ("Case Status", caseDetails.CaseStatus?.StatusName ?? "N/A")
        };
    }

    private void OnFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
    }

    private async Task UploadFiles()
    {
        if (!selectedFiles.Any()) return;

        using var scope = ServiceScopeFactory.CreateScope();
        var context = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();

        foreach (var file in selectedFiles)
        {
            var trustedFileName = Path.GetRandomFileName();
            var path = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "uploads", trustedFileName);

            await using FileStream fs = new(path, FileMode.Create);
            await file.OpenReadStream().CopyToAsync(fs);

            var document = new CaseDocument
                {
                    CaseId = CaseId,
                    FileName = file.Name,
                    FilePath = path,
                    UploadDate = DateTime.UtcNow
                };

            context.Documents.Add(document);
        }

        await context.SaveChangesAsync();
        Snackbar.Add("Documents uploaded successfully", Severity.Success);
        caseDocuments = await GetCaseDocumentsAsync(CaseId);
        selectedFiles = new List<IBrowserFile>();
    }

    private async Task<List<CaseDocument>> GetCaseDocumentsAsync(int caseId)
    {
        using var scope = ServiceScopeFactory.CreateScope();
        var context = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();

        return await context.Documents
            .Where(d => d.CaseId == caseId)
            .ToListAsync();
    }

    private async Task DownloadDocument(int documentId)
    {
        // Implement the document download logic here
        var document = caseDocuments.FirstOrDefault(d => d.Id == documentId);
        if (document != null)
        {
            var path = document.FilePath;
            var js = (IJSInProcessRuntime)JSRuntime;
            await js.InvokeVoidAsync("BlazorDownloadFile", path, document.FileName);
        }
    }
}
