@page "/taskdetails/{taskId:int}"
@attribute [Authorize(Roles = "Admin, Team")]

@using LegalCaseManagement.Domain
@using LegalCaseManagement.Data
@using LegalCaseManagement.Service
@using Microsoft.EntityFrameworkCore
@using MudBlazor
@using System.IO
@inject IJSRuntime JSRuntime
@inject IServiceScopeFactory ServiceScopeFactory
@inject NavigationManager Navigation
@inject ISnackbar snackbar
@inject MyTaskService myTaskService

        <MudText Typo="Typo.h5" Class="mb-4">Task Detail</MudText>

        @if (task != null)
        {
            <MudGrid>
                <MudItem xs="12">
                    <MudTable Items="@detailRows" Dense="true" Hover="true" Elevation="0">
                        <RowTemplate>
                            <MudTd Style="width: 25%; color: #6c757d;">@context.Label</MudTd>
                            <MudTd Style="width: 25%;">@context.Value1</MudTd>
                            <MudTd Style="width: 25%; color: #6c757d;">@context.Label2</MudTd>
                            <MudTd Style="width: 25%;">@context.Value2</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudItem>
            </MudGrid>

            <MudDivider Class="my-6" />

            <h4>Case Details</h4>
            <MudGrid>
                <MudItem xs="12">
                    <MudTable Items="@caseDetailRows" Dense="true" Hover="true" Elevation="0">
                        <RowTemplate>
                            <MudTd Style="width: 25%; color: #6c757d;">@context.Label</MudTd>
                            <MudTd Style="width: 25%;">@context.Value1</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudItem>
            </MudGrid>

    <MudDivider Class="my-6" />

    <h4>Case Documents</h4>
    @if (caseDocuments.Any())
    {
        <MudGrid>
            @foreach (var doc in caseDocuments)
            {
                <MudItem xs="12">
                    <MudPaper Class="pa-4" Style="width: 100%;">
                        <MudGrid>
                            <MudItem xs="1">
                                <MudIconButton Icon="@Icons.Material.Filled.PictureAsPdf" Color="Color.Secondary" />
                            </MudItem>
                            <MudItem xs="9">
                                <MudText>@doc.FileName</MudText>
                                <MudText Typo="Typo.caption" Class="text-muted">@doc.UploadDate.ToString("dd MMM yyyy")</MudText>
                            </MudItem>
                            <MudItem xs="2">
                                <MudIconButton Icon="@Icons.Material.Filled.Download" Color="Color.Primary" OnClick="@(() => DownloadDocument(doc.Id))" />
                            </MudItem>
                        </MudGrid>
                    </MudPaper>
                </MudItem>
            }
        </MudGrid>
    }
    else
    {
        <MudText>No documents uploaded for this case.</MudText>
    }

            <MudDivider Class="my-6" />

            <h4>Update Task Status</h4>
            <EditForm Model="@task" OnValidSubmit="UpdateTask">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudSelect @bind-Value="task.StatusId" Label="Task Status" Required="true">
                            @foreach (var status in statuses)
                            {
                                <MudSelectItem Value="@status.StatusId">@status.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4">
                        <div class="mb-3">
                            <label for="fileAttachment" class="form-label">Attach File (optional)</label>
                            <InputFile @bind-Value="task.Case.FileAttachment" id="fileAttachment" class="form-control" />
                        </div>
                    </MudItem>
                </MudGrid>
                <br />
                <MudItem xs="12">
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" ButtonType="ButtonType.Submit">Task Complete</MudButton>
                    <MudButton Color="Color.Secondary" Variant="Variant.Outlined" @onclick="NavigateBack">Cancel</MudButton>
                </MudItem>
            </EditForm>
        }
        else if (isLoading)
        {
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        }
        else
        {
            <MudAlert Severity="Severity.Error">Failed to load task data. Please try again later.</MudAlert>
        }

<script>
    function downloadFileFromStream(fileName, base64String) {
        const link = document.createElement('a');
        link.download = fileName;
        link.href = "data:application/octet-stream;base64," + base64String;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
</script>

@code {
    [Parameter] public int taskId { get; set; }
    private MyTask task;
    private List<MyTaskStatus> statuses = new List<MyTaskStatus>();
    private List<DetailRow> detailRows = new List<DetailRow>();
    private List<DetailRow> caseDetailRows = new List<DetailRow>();
    private bool isLoading = true;
    private List<CaseDocument> caseDocuments = new List<CaseDocument>();

    protected override async Task OnInitializedAsync()
    {
        await LoadTask();
    }

    private async Task LoadCaseDocuments()
    {
        if (task?.Case != null)
        {
            using var scope = ServiceScopeFactory.CreateScope();
            var context = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();

            caseDocuments = await context.Documents
                .Where(d => d.CaseId == task.Case.CaseId)
                .ToListAsync();
        }
    }

    private async Task DownloadDocument(int documentId)
    {
        var document = caseDocuments.FirstOrDefault(d => d.Id == documentId);
        if (document != null)
        {
            try
            {
                // Read the file content
                byte[] fileBytes = await File.ReadAllBytesAsync(document.FilePath);

                // Convert the file to a base64 string
                string base64String = Convert.ToBase64String(fileBytes);

                // Use JSRuntime to trigger the download
                await JSRuntime.InvokeVoidAsync("downloadFileFromStream", document.FileName, base64String);
            }
            catch (Exception ex)
            {
                snackbar.Add($"Error downloading file: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task LoadTask()
    {
        try
        {
            isLoading = true;
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var context = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
                task = await context.MyTasks
                    .Include(t => t.Priority)
                    .Include(t => t.Status)
                    .Include(t => t.Case)
                        .ThenInclude(c => c.CaseType)
                    .Include(t => t.Case)
                        .ThenInclude(c => c.CaseStatus)
                    .Include(t => t.Case)
                        .ThenInclude(c => c.AppUser)
                    .FirstOrDefaultAsync(t => t.TaskId == taskId);

                statuses = await context.Statuses.ToListAsync();
            }

            if (task != null)
            {
                PopulateDetailRows();
                PopulateCaseDetailRows();
                await LoadCaseDocuments(); // Add this line
            }
            else
            {
                snackbar.Add("Task not found", Severity.Warning);
                Navigation.NavigateTo("/myassignedtasks");
            }
        }
        catch (Exception ex)
        {
            snackbar.Add($"Error loading task: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void PopulateDetailRows()
    {
        detailRows = new List<DetailRow>
        {
            new DetailRow("Due Date", task.DueDate?.ToString("dd MMM yyyy")),
            new DetailRow("Description", task.Description, "Status", task.Status?.Name)
        };
    }

    private void PopulateCaseDetailRows()
    {
        if (task.Case != null)
        {
            caseDetailRows = new List<DetailRow>
            {
                new DetailRow("Case Type", task.Case.CaseType?.TypeName, ""),
                new DetailRow("Filing No", task.Case.RegistrationNo, "Filing Date", task.Case.RegistrationDate?.ToString("dd-MM-yyyy")),
                new DetailRow("First Hearing Date", task.Case.StartDate?.ToString("dd-MM-yyyy"), "Next Hearing Date", task.Case.EndDate?.ToString("dd-MM-yyyy")),
                new DetailRow("Case Status", task.Case.CaseStatus?.StatusName, "Court No.", "1"),
                new DetailRow("Judge", "Ms. Neerja Kulwant Kalson D.J / S.J", "", "")
            };
        }
    }

    private async Task UpdateTask()
    {
        if (task.TaskId != 0)
        {
            var existingTask = await myTaskService.GetByIdAsync(task.TaskId);

            if (existingTask != null)
            {
                existingTask.StatusId = task.StatusId; // Update the status
                await myTaskService.UpdateAsync(existingTask); // Save the changes
                snackbar.Add("The task was updated", Severity.Success);
            }
            else
            {
                snackbar.Add("The task does not exist", Severity.Error);
            }
        }
        else
        {
            snackbar.Add("Invalid task ID", Severity.Error);
        }
    }

    private void NavigateBack()
    {
        Navigation.NavigateTo("/myassignedtasks");
    }

    public class DetailRow
    {
        public string Label { get; set; }
        public string Value1 { get; set; }
        public string Label2 { get; set; }
        public string Value2 { get; set; }

        public DetailRow(string label, string value1, string label2 = "", string value2 = "")
        {
            Label = label;
            Value1 = value1;
            Label2 = label2;
            Value2 = value2;
        }
    }
}
