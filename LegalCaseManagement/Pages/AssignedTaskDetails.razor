@page "/taskdetails/{taskId:int}"
@attribute [Authorize(Roles = "Admin, Team")]

@using LegalCaseManagement.Domain
@using LegalCaseManagement.Data
@using LegalCaseManagement.Service
@using Microsoft.EntityFrameworkCore
@using MudBlazor
@inject IServiceScopeFactory ServiceScopeFactory
@inject NavigationManager Navigation
@inject ISnackbar snackbar
@inject MyTaskService myTaskService

    @if (task == null)
    {
        <div class="centered">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
        </div>
    }
    else
    {
        <h3>Task Details</h3>
        <br />
        <MudPaper Elevation="2">
            <MudTable Items="new List<MyTask> { task }">
                <HeaderContent>
                    <MudTh>Description</MudTh>
                    <MudTh>Due Date</MudTh>
                    <MudTh>Status</MudTh>
                    <MudTh>Case</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.Description</MudTd>
                    <MudTd>@context.DueDate?.ToString("dd MMM yyyy")</MudTd>
                    <MudTd>@context.Status?.Name</MudTd>
                    <MudTd>@context.Case?.Discription</MudTd>
                </RowTemplate>
            </MudTable>
        </MudPaper>

        <MudPaper Class="mt-4 p-4">
            <h4>Case Details</h4>
            <MudTable Items="new List<Case> { task.Case }">
                <HeaderContent>
                    <MudTh>Start Date</MudTh>
                    <MudTh>End Date</MudTh>
                    <MudTh>Registration Date</MudTh>
                    <MudTh>Registration Number</MudTh>
                    <MudTh>Petitioner</MudTh>
                    <MudTh>Defendant</MudTh>
                    <MudTh>Description</MudTh>
                    <MudTh>Case Type</MudTh>
                    <MudTh>Case Status</MudTh>
                    <MudTh>Client</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.StartDate?.ToString("dd MMM yyyy")</MudTd>
                    <MudTd>@context.EndDate?.ToString("dd MMM yyyy")</MudTd>
                    <MudTd>@context.RegistrationDate?.ToString("dd MMM yyyy")</MudTd>
                    <MudTd>@context.RegistrationNo</MudTd>
                    <MudTd>@context.Petitioner</MudTd>
                    <MudTd>@context.Defendant</MudTd>
                    <MudTd>@context.Discription</MudTd>
                    <MudTd>@context.CaseType?.TypeName</MudTd>
                    <MudTd>@context.CaseStatus?.StatusName</MudTd>
                    <MudTd>@context.AppUser?.UserName</MudTd>
                </RowTemplate>
            </MudTable>
        </MudPaper>
        <br />
        <MudPaper Class="mt-4 p-4">
            <h4>Update Task Status</h4>
            <EditForm Model="@task" OnValidSubmit="UpdateTask">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudSelect @bind-Value="task.StatusId" Label="Task Status" Required="true">
                            @foreach (var status in statuses)
                            {
                                <MudSelectItem Value="@status.StatusId">@status.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="4">
                        <div class="mb-3">
                            <label for="fileAttachment" class="form-label">Attach File (optional)</label>
                            <InputFile @bind-Value="task.Case.FileAttachment" id="fileAttachment" class="form-control" />
                        </div>
                    </MudItem>
                </MudGrid>
                <br />
                <MudItem xs="12">
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" ButtonType="ButtonType.Submit">Update Status</MudButton>
                    <MudButton Color="Color.Secondary" Variant="Variant.Filled" @onclick="NavigateBack">Cancel</MudButton>
                </MudItem>
            </EditForm>
        </MudPaper>
    }


@code {
    [Parameter] public int taskId { get; set; }
    private MyTask task;
    private List<MyTaskStatus> statuses = new List<MyTaskStatus>();

    protected override async Task OnInitializedAsync()
    {
        using (var scope = ServiceScopeFactory.CreateScope())
        {
            var context = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
            task = await context.MyTasks
                .Include(t => t.Priority)
                .Include(t => t.Status)
                .Include(t => t.Case)
                    .ThenInclude(c => c.CaseType)
                .Include(t => t.Case)
                    .ThenInclude(c => c.CaseStatus)
                .Include(t => t.Case)
                    .ThenInclude(c => c.AppUser)
                .FirstOrDefaultAsync(t => t.TaskId == taskId);

            statuses = await context.Statuses.ToListAsync();
        }
    }

    private void NavigateBack()
    {
        Navigation.NavigateTo("/myassignedtasks");
    }

    private async Task UpdateTask()
    {
        if (task.TaskId != 0)
        {
            var existingTask = await myTaskService.GetByIdAsync(task.TaskId);

            if (existingTask != null)
            {
                existingTask.StatusId = task.StatusId; // Update the status
                await myTaskService.UpdateAsync(existingTask); // Save the changes
                snackbar.Add("The task was completed", Severity.Success);
            }
            else
            {
                snackbar.Add("The task does not exist", Severity.Error);
            }
        }
        else
        {
            snackbar.Add("Invalid task ID", Severity.Error);
        }
    }
}
