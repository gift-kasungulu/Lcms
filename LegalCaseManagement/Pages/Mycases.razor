@page "/cases"
@attribute [Authorize(Roles = "Team, Admin")]
<PageTitle>Cases</PageTitle>

@using LegalCaseManagement.Service
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@using LegalCaseManagement.Data
@using LegalCaseManagement.Data.LegalServices
@using MudBlazor
@inject ISnackbar snackbar
@inject CaseTypeService caseTypeService
@inject CaseStatusService caseStatusService
@inject CaseService caseService
@inject IServiceScopeFactory ServiceScopeFactory
@inject UserManager<ApplicationUser> _userManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject PdfService pdfService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager
@inject IHttpContextAccessor HttpContextAccessor


<div class="modal @modalClass" tabindex="-1" aria-labelledby="addCaseModalLabel" style="display:@modalDisplay">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addCaseModalLabel">Add New Case</h5>
                <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close">&times;</button>
            </div>
            <div class="modal-body">
                <EditForm Model="newCase" OnValidSubmit="Add">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="mb-3">
                        <label for="description" class="form-label">Description</label>
                        <InputText @bind-Value="newCase.Discription" id="description" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label for="registrationDate" class="form-label">Registration Date</label>
                        <InputDate @bind-Value="newCase.RegistrationDate" id="registrationDate" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="registrationNo" class="form-label">Registration Number</label>
                        <InputText @bind-Value="newCase.RegistrationNo" id="registrationNo" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label for="fileAttachment" class="form-label">Attach File</label>
                        <InputFile @bind-Value="newCase.FileAttachment" id="fileAttachment" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="startDate" class="form-label">Starting Date</label>
                        <InputDate @bind-Value="newCase.StartDate" id="startDate" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="endDate" class="form-label">Next Hearing Date</label>
                        <InputDate @bind-Value="newCase.EndDate" id="endDate" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label for="petitioner" class="form-label">Petitioner</label>
                        <InputText @bind-Value="newCase.Petitioner" id="petitioner" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label for="defendant" class="form-label">Court Name</label>
                        <InputText @bind-Value="newCase.Defendant" id="defendant" class="form-control" required />
                    </div>
                    <div class="mb-3">
                        <label for="client" class="form-label">Client</label>
                        <InputSelect @bind-Value="newCase.UserId" id="client" class="form-select" required>
                            @foreach (var client in clients)
                            {
                                <option value="@client.Id">@client.FirstName @client.LastName</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="mb-3">
                        <label for="caseType" class="form-label">Case Type</label>
                        <InputSelect @bind-Value="newCase.CaseTypeId" id="caseType" class="form-select" required>
                            @foreach (var caseType in caseTypes)
                            {
                                <option value="@caseType.CaseTypeId">@caseType.TypeName</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="mb-3">
                        <label for="caseStatus" class="form-label">Case Status</label>
                        <InputSelect @bind-Value="newCase.StatusId" id="caseStatus" class="form-select" required>
                            @foreach (var caseStatus in caseStatuses)
                            {
                                <option value="@caseStatus.StatusId">@caseStatus.StatusName</option>
                            }
                        </InputSelect>
                    </div>
                    <button type="submit" class="btn btn-primary">Add Case</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>


<MudButton OnClick="OpenModal" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary">
        Create Case
 </MudButton>
 <br />
            <MudTabs Elevation="1">
    <MudTabPanel Text="Running Cases">
        @* Running Cases Table *@
                <MudTable Items="runningCases" Filter="new Func<Case,bool>(Search)">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Cases</MudText>
                        <MudSpacer />
                <MudTextField @bind-Value="searchString" Placeholder="Search by Description, Client, or Case ID"
                              IconSize="Size.Large" StartIcon="@Icons.Material.Filled.Search" Class="mt-0"></MudTextField>

                    </ToolBarContent>
            <HeaderContent>
                <MudTh>#</MudTh>
                <MudTh>Next Date</MudTh>
                <MudTh>Petitioner</MudTh>
                <MudTh>Vs Client</MudTh>
                <MudTh>Court Name</MudTh>
                <MudTh>Status</MudTh>
                <MudTh>Action</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="CaseId">@context.CaseId</MudTd>
                <MudTd DataLabel="EndDate">@context.EndDate?.ToString("dd-MM-yyyy")</MudTd>
                <MudTd DataLabel="Petitioner">@context.Petitioner</MudTd>
                <MudTd DataLabel="AppUser">@context.AppUser?.FirstName @context.AppUser?.LastName</MudTd>
                <MudTd DataLabel="Defendant">@context.Defendant</MudTd>
                <MudTd DataLabel="CaseStatus">@context.CaseStatus?.StatusName</MudTd>
                <MudTd DataLabel="Actions">
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                            <MudMenuItem OnClick="@(() => NavigateToCaseDetails(context.CaseId))">
                                <i class="bi bi-eye"></i>
                                View
                            </MudMenuItem>
                        <MudMenuItem OnClick="@(() => OpenEditDateModal(context))">
                            <i class="bi bi-calendar-event"></i>
                            Next Date
                        </MudMenuItem>
                        <MudMenuItem OnClick="@(() => OpenUpdateModal(context))">
                            <i class="bi bi-pencil"></i>
                            Edit
                        </MudMenuItem>

                        <MudMenuItem OnClick="@(() => Deletecase(context))">
                            <i class="bi bi-trash"></i>
                            Delete 
                        </MudMenuItem>
                    </MudMenu>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudTabPanel>
    <MudTabPanel Text="High-Priority Cases">
        @* High-Priority Cases Table *@
                <MudTable Items="highPriorityCases" Filter="new Func<Case,bool>(Search)">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Cases</MudText>
                        <MudSpacer />
                <MudTextField @bind-Value="searchString" Placeholder="Search by Description, Client, or Case ID"
                              IconSize="Size.Large" StartIcon="@Icons.Material.Filled.Search" Class="mt-0"></MudTextField>

                    </ToolBarContent>
            <HeaderContent>
                <MudTh>#</MudTh>
                <MudTh>Next Date</MudTh>
                <MudTh>Petitioner</MudTh>
                <MudTh>Vs Client</MudTh>
                <MudTh>Court Name</MudTh>
                <MudTh>Status</MudTh>
                <MudTh>Action</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="CaseId">@context.CaseId</MudTd>
                <MudTd DataLabel="EndDate">@context.EndDate?.ToString("dd-MM-yyyy")</MudTd>
                <MudTd DataLabel="Petitioner">@context.Petitioner</MudTd>
                <MudTd DataLabel="AppUser">@context.AppUser?.FirstName @context.AppUser?.LastName</MudTd>
                <MudTd DataLabel="Defendant">@context.Defendant</MudTd>
                <MudTd DataLabel="CaseStatus">@context.CaseStatus?.StatusName</MudTd>
                <MudTd DataLabel="Actions">
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                        <MudMenuItem OnClick="@(() => NavigateToCaseDetails(context.CaseId))">
                            <i class="bi bi-eye"></i>
                            View
                        </MudMenuItem>
                        <MudMenuItem OnClick="@(() => OpenEditDateModal(context))">
                            <i class="bi bi-calendar-event"></i>
                            Next Date
                        </MudMenuItem>
                        <MudMenuItem OnClick="@(() => OpenUpdateModal(context))">
                            <i class="bi bi-pencil"></i>
                            Edit
                        </MudMenuItem>

                        <MudMenuItem OnClick="@(() => Deletecase(context))">
                            <i class="bi bi-bi-trash"></i>
                            Delete
                        </MudMenuItem>
                    </MudMenu>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudTabPanel>
    <MudTabPanel Text="Abandoned Cases">
        @* Abandoned Cases Table *@
                <MudTable Items="abandonedCases" Filter="new Func<Case,bool>(Search)">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Cases</MudText>
                        <MudSpacer />
                <MudTextField @bind-Value="searchString" Placeholder="Search by Description, Client, or Case ID"
                              IconSize="Size.Large" StartIcon="@Icons.Material.Filled.Search" Class="mt-0"></MudTextField>

                    </ToolBarContent>
            <HeaderContent>
                <MudTh>#</MudTh>
                <MudTh>Next Date</MudTh>
                <MudTh>Petitioner</MudTh>
                <MudTh>Vs Client</MudTh>
                <MudTh>Court Name</MudTh>
                <MudTh>Status</MudTh>
                <MudTh>Action</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="CaseId">@context.CaseId</MudTd>
                <MudTd DataLabel="EndDate">@context.EndDate?.ToString("dd-MM-yyyy")</MudTd>
                <MudTd DataLabel="Petitioner">@context.Petitioner</MudTd>
                <MudTd DataLabel="AppUser">@context.AppUser?.FirstName @context.AppUser?.LastName</MudTd>
                <MudTd DataLabel="Defendant">@context.Defendant</MudTd>
                <MudTd DataLabel="CaseStatus">@context.CaseStatus?.StatusName</MudTd>
                <MudTd DataLabel="Actions">
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                        <MudMenuItem OnClick="@(() => NavigateToCaseDetails(context.CaseId))">
                            <i class="bi bi-eye"></i>
                            View
                        </MudMenuItem>
                        <MudMenuItem OnClick="@(() => OpenEditDateModal(context))">
                            <i class="bi bi-calendar-event"></i>
                            Next Date
                        </MudMenuItem>
                        <MudMenuItem OnClick="@(() => OpenUpdateModal(context))">
                            <i class="bi bi-pencil"></i>
                            Edit
                        </MudMenuItem>

                        <MudMenuItem OnClick="@(() => Deletecase(context))">
                            <i class="bi bi-bi-trash"></i>
                            Delete
                        </MudMenuItem>
                    </MudMenu>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudTabPanel>
    <MudTabPanel Text="Decided Cases">
        @* Decided Cases Table *@
                <MudTable Items="decidedCases" Filter="new Func<Case,bool>(Search)">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Cases</MudText>
                        <MudSpacer />
                <MudTextField @bind-Value="searchString" Placeholder="Search by Description, Client, or Case ID"
                              IconSize="Size.Large" StartIcon="@Icons.Material.Filled.Search" Class="mt-0"></MudTextField>

                    </ToolBarContent>
            <HeaderContent>
                <MudTh>#</MudTh>
                <MudTh>Next Date</MudTh>
                <MudTh>Petitioner</MudTh>
                <MudTh>Vs Client</MudTh>
                <MudTh>Court Name</MudTh>
                <MudTh>Status</MudTh>
                <MudTh>Action</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="CaseId">@context.CaseId</MudTd>
                <MudTd DataLabel="EndDate">@context.EndDate?.ToString("dd-MM-yyyy")</MudTd>
                <MudTd DataLabel="Petitioner">@context.Petitioner</MudTd>
                <MudTd DataLabel="AppUser">@context.AppUser?.FirstName @context.AppUser?.LastName</MudTd>
                <MudTd DataLabel="Defendant">@context.Defendant</MudTd>
                <MudTd DataLabel="CaseStatus">@context.CaseStatus?.StatusName</MudTd>
                <MudTd DataLabel="Actions">
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                        <MudMenuItem OnClick="@(() => NavigateToCaseDetails(context.CaseId))">
                            <i class="bi bi-eye"></i>
                            View
                        </MudMenuItem>
                        <MudMenuItem OnClick="@(() => OpenEditDateModal(context))">
                            <i class="bi bi-calendar-event"></i>
                            Next Date
                        </MudMenuItem>
                        <MudMenuItem OnClick="@(() => OpenUpdateModal(context))">
                            <i class="bi bi-pencil"></i>
                            Edit
                        </MudMenuItem>

                        <MudMenuItem OnClick="@(() => Deletecase(context))">
                            <i class="bi bi-bi-trash"></i>
                            Delete
                        </MudMenuItem>
                    </MudMenu>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudTabPanel>
</MudTabs>
<MudDialog @bind-IsVisible="isEditDateModalVisible">
    <TitleContent>
        <MudText Typo="Typo.h6">Edit Next Hearing Date</MudText>
    </TitleContent>
    <DialogContent>
        <MudDatePicker @bind-Date="editingCase.EndDate" Label="Next Hearing Date" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CloseEditDateModal">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="UpdateNextHearingDate">Save</MudButton>
    </DialogActions>
</MudDialog>
    
<br />
<MudTooltip Text="Select Date"> 
         <MudDatePicker @bind-Date="selectedDate" Label="Select Date" />
</MudTooltip>
            <br />
            <MudButton OnClick="SearchCases" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Search"
                Color="Color.Primary">Search</MudButton>
<MudTable Items="@filteredCaseList" Dense="true" Hover="true" Filter="new Func<Case,bool>(Search)">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Cases Listed</MudText>
        <MudSpacer />
        <MudButton OnClick="@DownloadPdf" Variant="Variant.Filled" Color="Color.Primary">Download PDF</MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Sr No</MudTh>
        <MudTh>Cases</MudTh>
        <MudTh>Petitioner vs Respondent</MudTh>
        <MudTh>Stage of Case</MudTh>
        <MudTh>Next Date</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.CaseId</MudTd>
        <MudTd>@context.RegistrationNo</MudTd>
        <MudTd>
            @context.Petitioner vs @context.AppUser?.FirstName @context.AppUser?.LastName
        </MudTd>
        <MudTd>@context.CaseStatus.StatusName</MudTd>
        <MudTd>@(context.EndDate.HasValue ? context.EndDate.Value.ToString("dd-MM-yyyy") : "")</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<br />
<div id="calendar"></div>

@code {
    private IJSObjectReference? calendarInstance;
    private IJSObjectReference? module;
    private string searchString = "";
    private Case newCase = new Case();
    private List<Case> caseList = new List<Case>();
    private List<ApplicationUser> clients = new List<ApplicationUser>();
    private List<CaseType> caseTypes = new List<CaseType>();
    private List<CaseStatus> caseStatuses = new List<CaseStatus>();
    private bool isModalVisible = false;
    private string modalClass => isModalVisible ? "show" : "";
    private string modalDisplay => isModalVisible ? "block" : "none";
    private DateTime? selectedDate;
    //private List<Case> caseList = new List<Case>();
    private List<Case> filteredCaseList = new List<Case>();
    private List<Case> filteredCases = new List<Case>();
    private List<Case> runningCases = new List<Case>();
    private List<Case> highPriorityCases = new List<Case>();
    private List<Case> abandonedCases = new List<Case>();
    private List<Case> decidedCases = new List<Case>();
    private bool isEditDateModalVisible = false;
    private Case editingCase = new Case();
    private bool isUpdateModalVisible = false;
    private string updateModalClass => isUpdateModalVisible ? "show" : "";
    private string updateModalDisplay => isUpdateModalVisible ? "block" : "";

    private void OpenUpdateModal(Case caseToEdit)
    {
        editingCase = caseToEdit;
        isUpdateModalVisible = true;
    }

    private void CloseUpdateModal()
    {
        isUpdateModalVisible = false;
    }

    private async Task UpdateCase()
    {
        using (var scope = ServiceScopeFactory.CreateScope())
        {
            var context = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
            var notificationService = scope.ServiceProvider.GetRequiredService<NotificationService>();
            var caseToUpdate = await context.Cases.FindAsync(editingCase.CaseId);
            if (caseToUpdate != null)
            {
                caseToUpdate.Discription = editingCase.Discription;
                caseToUpdate.RegistrationDate = editingCase.RegistrationDate;
                caseToUpdate.RegistrationNo = editingCase.RegistrationNo;
                caseToUpdate.StartDate = editingCase.StartDate;
                caseToUpdate.EndDate = editingCase.EndDate;
                caseToUpdate.Petitioner = editingCase.Petitioner;
                caseToUpdate.Defendant = editingCase.Defendant;
                caseToUpdate.UserId = editingCase.UserId;
                caseToUpdate.CaseTypeId = editingCase.CaseTypeId;
                caseToUpdate.StatusId = editingCase.StatusId;

                await context.SaveChangesAsync();
                snackbar.Add("Case updated successfully.", Severity.Success);

                // Create notification
                var message = $"Case {caseToUpdate.RegistrationNo} has been updated.";
                await notificationService.CreateNotification(caseToUpdate.UserId, message);
            }
        }

        await GetAllAsync();
        CloseUpdateModal();
    }


    protected override async Task OnInitializedAsync()
    {
        await GetAllAsync();
        clients = (await _userManager.GetUsersInRoleAsync("Client")).ToList();
        caseTypes = await caseTypeService.GetAllAsync();
        caseStatuses = await caseStatusService.GetAllAsync();
        FilterCases();

        selectedDate = DateTime.Today;
    }

    private async Task Deletecase(Case mycase)
    {
        await caseService.AddAsync(mycase);
        snackbar.Add("The case was deleted ", Severity.Warning);
    }

    private void OpenEditDateModal(Case caseToEdit)
    {
        editingCase = caseToEdit;
        isEditDateModalVisible = true;
    }

    private void CloseEditDateModal()
    {
        isEditDateModalVisible = false;
    }

    private async Task UpdateNextHearingDate()
    {
        using (var scope = ServiceScopeFactory.CreateScope())
        {
            var context = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
            var notificationService = scope.ServiceProvider.GetRequiredService<NotificationService>();
            var caseToUpdate = await context.Cases.FindAsync(editingCase.CaseId);
            if (caseToUpdate != null)
            {
                caseToUpdate.EndDate = editingCase.EndDate;
                await context.SaveChangesAsync();
                snackbar.Add("Next hearing date updated successfully.", Severity.Success);

                // Create notification
                var message = $"Next hearing date for case {caseToUpdate.RegistrationNo} has been updated to {caseToUpdate.EndDate:d}.";
                await notificationService.CreateNotification(caseToUpdate.UserId, message);
            }
        }

        await GetAllAsync();
        CloseEditDateModal();
    }

    private void NavigateToCaseDetails(int caseId)
    {
        NavManager.NavigateTo($"/assignedcasedetails/{caseId}");
    }

    private void FilterCases()
    {
        runningCases = caseList.Where(c => c.CaseStatus.StatusName == "In Progress").ToList();
        highPriorityCases = caseList.Where(c => c.CaseType.TypeName == "High").ToList();
        abandonedCases = caseList.Where(c => c.CaseType.TypeName == "Abandoned").ToList();
        decidedCases = caseList.Where(c => c.CaseType.TypeName == "Decided").ToList();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./site.js");
            await InitializeCalendar();
        }
    }

    private async Task InitializeCalendar()
    {
        // Retrieve cases from the database
        var cases = await GetCasesWithRelatedDataAsync();

        // Create a list of calendar events
        var events = cases.Select(c => new
        {
            title = $"Case {c.RegistrationNo}",
            start = c.EndDate?.ToString("yyyy-MM-dd"), // Correct usage of ToString with format 
                                                       // Add any other relevant case properties
        });

        await module.InvokeVoidAsync("renderCalendar", "calendar", events);
        calendarInstance = await module.InvokeAsync<IJSObjectReference>("getCalendarInstance");
    }

    private async void NavigateToAssignedCases()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await _userManager.GetUserAsync(authState.User);

        if (user != null)
        {
            NavManager.NavigateTo($"/myassignedtasks/{user.Id}");
        }
    }

    private async Task DownloadPdf()
    {
        await JSRuntime.InvokeVoidAsync("generatePdf", filteredCaseList);
    }

    private bool Search(Case mycase)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (mycase.Petitioner.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

    private void SearchCases()
    {
        if (selectedDate.HasValue)
        {
            filteredCaseList = caseList.Where(c => c.EndDate.HasValue && c.EndDate.Value.Date == selectedDate.Value.Date).ToList();

        }
        else
        {
            filteredCaseList = new List<Case>(); // or caseList if you want to show all cases when no date is selected
        }
    }

    private async Task Add()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await _userManager.GetUserAsync(authState.User);

        using (var scope = ServiceScopeFactory.CreateScope())
        {
            var context = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();

            // Attach existing CaseType
            if (newCase.CaseTypeId != 0)
            {
                var existingCaseType = await context.CaseType.FindAsync(newCase.CaseTypeId);
                if (existingCaseType != null)
                {
                    newCase.CaseType = existingCaseType;
                    context.Entry(existingCaseType).State = EntityState.Unchanged;
                }
            }

            // Attach existing CaseStatus
            if (newCase.StatusId != 0)
            {
                var existingCaseStatus = await context.CaseStatus.FindAsync(newCase.StatusId);
                if (existingCaseStatus != null)
                {
                    newCase.CaseStatus = existingCaseStatus;
                    context.Entry(existingCaseStatus).State = EntityState.Unchanged;
                }
            }

            if (newCase.CaseId == 0)
            {
                newCase.CreatedByUserId = user?.Id;
                newCase.CreatedAt = DateTime.UtcNow;
                context.Cases.Add(newCase);
                snackbar.Add("New case added successfully.", Severity.Success);
            }
            else
            {
                context.Cases.Update(newCase);
                snackbar.Add("Case updated successfully.", Severity.Success);
            }

            await context.SaveChangesAsync();
        }

        isModalVisible = false;
        await GetAllAsync();
    }

    public void Update(Case caseRecord)
    {
        OpenModal();
        newCase = caseRecord;
        StateHasChanged();
    }

    private async Task<List<ApplicationUser>> GetUsersAsync()
    {
        using (var scope = ServiceScopeFactory.CreateScope())
        {
            var userManager = scope.ServiceProvider.GetRequiredService<UserManager<ApplicationUser>>();
            return await userManager.Users.ToListAsync();
        }
    }

    private async Task<List<Case>> GetCasesWithRelatedDataAsync()
    {
        using (var scope = ServiceScopeFactory.CreateScope())
        {
            var context = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
            return await context.Cases
            .Include(c => c.AppUser)
            .Include(c => c.CaseStatus)
            .Include(c => c.CaseType)
            .ToListAsync();
        }
    }

        private async Task GetAllAsync()
    {
        var cases = await GetCasesWithRelatedDataAsync();
        var users = await GetUsersAsync();

        foreach (var caseItem in cases)
        {
            caseItem.AppUser = users.FirstOrDefault(u => u.Id == caseItem.UserId);
        }

        caseList = cases;
        FilterCases();
    }


    private void OpenModal()
    {
        isModalVisible = true;
    }
    
    private void CloseModal()
    {
        isModalVisible = false;
    }
}
