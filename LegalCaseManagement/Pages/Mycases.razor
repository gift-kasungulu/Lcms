@page "/cases"
@attribute [Authorize(Roles = "Team, Admin")]

@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@using LegalCaseManagement.Data
@using LegalCaseManagement.Data.LegalServices
@using MudBlazor
@inject ISnackbar snackbar
@inject CaseTypeService caseTypeService
@inject CaseStatusService caseStatusService
@inject CaseService caseService
@inject IServiceScopeFactory ServiceScopeFactory
@inject UserManager<ApplicationUser> _userManager
@inject PdfService pdfService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider



<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <button type="button" class="btn btn-primary" @onclick="OpenModal">
                Add New Case
            </button>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>

        <div class="modal @modalClass" tabindex="-1" aria-labelledby="addCaseModalLabel" style="display:@modalDisplay">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="addCaseModalLabel">Add New Case</h5>
                        <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <EditForm Model="newCase" OnValidSubmit="Add">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <div class="mb-3">
                                <label for="description" class="form-label">Desription</label>
                                <InputText @bind-Value="newCase.Discription" id="description" class="form-control"
                                    required />
                            </div>
                            <div class="mb-3">
                                <label for="startDate" class="form-label">Date</label>
                                <InputDate @bind-Value="newCase.StartDate" id="startDate" class="form-control" />
                            </div>
                            <div class="mb-3">
                                <label for="endDate" class="form-label">End Date</label>
                                <InputDate @bind-Value="newCase.EndDate" id="endDate" class="form-control" />
                            </div>
                            <div class="mb-3">
                                <label for="petitioner" class="form-label">Petitioner</label>
                                <InputText @bind-Value="newCase.Petitioner" id="petitioner" class="form-control"
                                    required />
                            </div>
                            <div class="mb-3">
                                <label for="defendant" class="form-label">Court Name</label>
                                <InputText @bind-Value="newCase.Defendant" id="defendant" class="form-control"
                                    required />
                            </div>
                            <div class="mb-3">
                                <label for="client" class="form-label">Client</label>
                                <InputSelect @bind-Value="newCase.UserId" id="client" class="form-select" required>
                                    @foreach (var client in clients)
                                    {
                                        <option value="@client.Id">@client.FirstName @client.LastName</option>
                                    }
                                </InputSelect>
                            </div>

                            <div class="mb-3">
                                <label for="caseType" class="form-label">Case Type</label>
                                <InputSelect @bind-Value="newCase.CaseTypeId" id="caseType" class="form-select"
                                    required>
                                    @foreach (var caseType in caseTypes)
                                    {
                                        <option value="@caseType.CaseTypeId">@caseType.TypeName</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="mb-3">
                                <label for="caseStatus" class="form-label">Case Status</label>
                                <InputSelect @bind-Value="newCase.StatusId" id="caseStatus" class="form-select"
                                    required>
                                    @foreach (var caseStatus in caseStatuses)
                                    {
                                        <option value="@caseStatus.StatusId">@caseStatus.StatusName</option>
                                    }
                                </InputSelect>
                            </div>
                            <button type="submit" class="btn btn-primary">Add Case</button>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </MudCardContent>
</MudCard>

<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ViewLawyerDetails">
    View Assigned Cases
</MudButton>


<br />
<MudCard>
    <MudCardHeader>
        <form>
            <div class="row">
                <div class="col-md-8">
                    <input type="text" class="form-control" placeholder="Enter Next Date" name="nDate">
                </div>
                <div class="col-md-4">
                    <button type="submit" class="btn btn-primary">Save</button>
                </div>
            </div>
        </form>
    
    </MudCardHeader>
    <MudCardContent>
        <MudTable Items="caseList" Filter="new Func<Case,bool>(Search)">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Cases</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchString" Placeholder="Search Here" IconSize="Size.Large"
                    StartIcon="@Icons.Material.Filled.Search" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>#</MudTh>
                <MudTh>Next Date</MudTh>
                <MudTh>Petitioner</MudTh>
                <MudTh>Vs Client</MudTh>
                <MudTh>Court Name</MudTh>
                <MudTh>Status</MudTh>
                <MudTh>Action</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="CaseId">@context.CaseId</MudTd>
                <MudTd DataLabel="EndDate">@context.EndDate</MudTd>
                <MudTd DataLabel="Petitioner">@context.Petitioner</MudTd>
                <MudTd DataLabel="AppUser">@context.AppUser?.FirstName @context.AppUser?.LastName</MudTd>
                <MudTd DataLabel="Defendant">@context.Defendant</MudTd>
                <MudTd DataLabel="CaseStatus">@context.CaseStatus.StatusName</MudTd>
                <MudTd DataLabel="Actions">
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                        <MudMenuItem>
                            <MudFab Color="Color.Info" StartIcon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="@(()=>Update(context))" />
                        </MudMenuItem>
                        <MudMenuItem>
                            <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" />
                        </MudMenuItem>
                        <MudMenuItem>
                            <MudFab  StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" />
                        </MudMenuItem>
                    </MudMenu>
                    
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudCardContent>
</MudCard>
<br />

<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudDatePicker @bind-Date="selectedDate" Label="Select Date" />
            <br />
            <MudButton OnClick="SearchCases" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Search"
                Color="Color.Primary">Search</MudButton>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudTable Items="filteredCaseList" Filter="new Func<Case,bool>(Search)">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Casue List</MudText>

                <MudButton OnClick="@DownloadPdf">Download PDF</MudButton>
                <MudSpacer />
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Next Date</MudTh>
                <MudTh>Petitioner</MudTh>
                <MudTh>Vs Client</MudTh>
                <MudTh>Court Name</MudTh>
                <MudTh>Status</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="EndDate">@context.EndDate</MudTd>
                <MudTd DataLabel="Petitioner">@context.Petitioner</MudTd>
                <MudTd DataLabel="AppUser">@context.AppUser?.FirstName @context.AppUser?.LastName</MudTd>
                <MudTd DataLabel="Defendant">@context.Defendant</MudTd>
                <MudTd DataLabel="CaseStatus">@context.CaseStatus.StatusName</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudCardContent>
</MudCard>


@code {

    private string searchString = "";
    private Case newCase = new Case();
    private List<Case> caseList = new List<Case>();
    private List<ApplicationUser> clients = new List<ApplicationUser>();
    private List<CaseType> caseTypes = new List<CaseType>();
    private List<CaseStatus> caseStatuses = new List<CaseStatus>();
    private bool isModalVisible = false;

    private string modalClass => isModalVisible ? "show" : "";
    private string modalDisplay => isModalVisible ? "block" : "none";

    private DateTime? selectedDate;
    //private List<Case> caseList = new List<Case>();
    private List<Case> filteredCaseList = new List<Case>();
    private List<Case> filteredCases = new List<Case>();

    protected override async Task OnInitializedAsync()
    {
        await GetAllAsync();
        clients = (await _userManager.GetUsersInRoleAsync("Client")).ToList();
        caseTypes = await caseTypeService.GetAllAsync();
        caseStatuses = await caseStatusService.GetAllAsync();
    }

   private async Task ViewLawyerDetails()
    {
        // Get the ID of the logged-in user
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userId = _userManager.GetUserId(authState.User);

        // Redirect to the lawyer details page with the user ID as a route parameter
        NavigationManager.NavigateTo($"/taskDetails/{userId}");
    }


    private async Task DownloadPdf()
    {
        byte[] pdfBytes = pdfService.GeneratePdfFromCases(filteredCases);
        // Provide a file name and trigger download
        await JSRuntime.InvokeAsync<object>("saveAsFile", $"filtered_cases.pdf", Convert.ToBase64String(pdfBytes));
    }

    private bool Search(Case mycase)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (mycase.Petitioner.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

    private void SearchCases()
    {
        if (selectedDate.HasValue)
        {
            filteredCaseList = caseList.Where(c => c.EndDate.HasValue && c.EndDate.Value.Date == selectedDate.Value.Date).ToList();

        }
        else
        {
            filteredCaseList = new List<Case>(); // or caseList if you want to show all cases when no date is selected
        }
    }

    /*public async Task Add()
    {
    if (newCase.CaseId == 0)
    {
    await caseService.AddAsync(newCase);
    await GetAllAsync();
    snackbar.Add("the Case was Added ", Severity.Success);
    CloseModal();
    }
    else
    {
    caseService.Update(newCase);
    snackbar.Add("Case Record Updated", Severity.Success);
    }
    }*/

    private async Task Add()
    {
        using (var scope = ServiceScopeFactory.CreateScope())
        {
            var context = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();

            // Attach existing CaseType
            if (newCase.CaseTypeId != 0)
            {
                var existingCaseType = await context.CaseType.FindAsync(newCase.CaseTypeId);
                if (existingCaseType != null)
                {
                    newCase.CaseType = existingCaseType;
                    context.Entry(existingCaseType).State = EntityState.Unchanged;
                }
            }

            // Attach existing CaseStatus
            if (newCase.StatusId != 0)
            {
                var existingCaseStatus = await context.CaseStatus.FindAsync(newCase.StatusId);
                if (existingCaseStatus != null)
                {
                    newCase.CaseStatus = existingCaseStatus;
                    context.Entry(existingCaseStatus).State = EntityState.Unchanged;
                }
            }

            // Attach existing Client
            /* if (!string.IsNullOrEmpty(newCase.UserId))
            {
            var existingClient = await _userManager.FindByIdAsync(newCase.UserId);
            if (existingClient != null)
            {
            newCase.Client = existingClient;
            context.Entry(existingClient).State = EntityState.Unchanged;
            }
            }*/

            if (newCase.CaseId == 0)
            {
                context.Cases.Add(newCase);
                snackbar.Add("New case added successfully.", Severity.Success);
            }
            else
            {
                context.Cases.Update(newCase);
                snackbar.Add("Case updated successfully.", Severity.Success);
            }

            await context.SaveChangesAsync();
        }

        isModalVisible = false;
        await GetAllAsync();
    }


    public void Update(Case caseRecord)
    {
        OpenModal();
        newCase = caseRecord;
        StateHasChanged();
    }

    private async Task<List<ApplicationUser>> GetUsersAsync()
    {
        using (var scope = ServiceScopeFactory.CreateScope())
        {
            var userManager = scope.ServiceProvider.GetRequiredService<UserManager<ApplicationUser>>();
            return await userManager.Users.ToListAsync();
        }
    }

    private async Task<List<Case>> GetCasesWithRelatedDataAsync()
    {
        using (var scope = ServiceScopeFactory.CreateScope())
        {
            var context = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
            return await context.Cases
            .Include(c => c.AppUser)
            .Include(c => c.CaseStatus)
            .Include(c => c.CaseType)
            .ToListAsync();
        }
    }

    private async Task GetAllAsync()
    {
        var cases = await GetCasesWithRelatedDataAsync();
        var users = await GetUsersAsync();

        foreach (var caseItem in cases)
        {
            caseItem.AppUser = users.FirstOrDefault(u => u.Id == caseItem.UserId);
        }

        caseList = cases;
    }

    private void OpenModal()
    {
        isModalVisible = true;
    }

    private void CloseModal()
    {
        isModalVisible = false;
    }
}
