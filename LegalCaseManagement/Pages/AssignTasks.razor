@page "/assigntask"
@attribute [Authorize(Roles = "Admin")]

@using Microsoft.EntityFrameworkCore
@using LegalCaseManagement.Data
@using LegalCaseManagement.Data.LegalServices
@using LegalCaseManagement.Domain
@using LegalCaseManagement.Service
@inject MyTaskService myTaskService
@inject LawyerService lawyerService
@inject CaseService caseService
@inject PriorityService priorityService
@inject TaskStatusService taskStatusService
@inject IServiceScopeFactory ServiceScopeFactory
@inject ISnackbar Snackbar
@inject NavigationManager Navigation

        <MudText Typo="Typo.h6" Class="mb-4">Assign Task</MudText>
        <EditForm Model="newTask" OnValidSubmit="AssignTask">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12" sm="6" md="4">
                    <MudTextField @bind-Value="newTask.Description" Label="Description" Required="true" />
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudDatePicker @bind-Date="newTask.FromDate" Label="From Date" />
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudDatePicker @bind-Date="newTask.DueDate" Label="Due Date" />
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudSelect @bind-Value="newTask.PriorityId" Label="Priority" Required="true">
                        @foreach (var priority in priorities)
                        {
                            <MudSelectItem Value="@priority.PriorityId">@priority.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudSelect @bind-Value="newTask.StatusId" Label="Task Status" Required="true">
                        @foreach (var status in taskStatuses)
                        {
                            <MudSelectItem Value="@status.StatusId">@status.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudSelect @bind-Value="newTask.LawyerId" Label="Assign To Lwyer" Required="true">
                        @foreach (var lawyer in lawyers)
                        {
                            <MudSelectItem Value="@lawyer.Id">@lawyer.FirstName @lawyer.LastName</MudSelectItem> <!-- Use lawyer.Id for ApplicationUser's Id -->
                        }
                    </MudSelect>
                </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudTextField @bind-Value="searchString" Label="Search Case" />
        </MudItem>
        <MudItem xs="12" md="6">
            <MudSelect @bind-Value="newTask.CaseId" Label="Case" Required="true">
                @foreach (var legalCase in cases.Where(c => c.Discription.Contains(searchString, StringComparison.OrdinalIgnoreCase)))
                {
                    <MudSelectItem Value="@legalCase.CaseId">@legalCase.Discription</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
            </MudGrid>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit" Class="mt-4">Assign Task</MudButton>
        </EditForm>

<br />
        <MudTable Items="tasks">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Tasks</MudText>
                <MudSpacer />
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Due Date</MudTh>
                <MudTh>Case Description</MudTh>
                <MudTh>Assigned Lawyer</MudTh>
                <MudTh>Priority</MudTh>
                <MudTh>Status</MudTh>
                <MudTh>Action</MudTh>
                <MudTh>Status</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="DueDate">@context.DueDate</MudTd>
                <MudTd DataLabel="Description">@context.Case?.Discription</MudTd>
                <MudTd DataLabel="AssignedLawyer">@context.LawyerInfo?.FirstName @context.LawyerInfo?.LastName</MudTd>
                <MudTd DataLabel="Priority">
                    <span class="@GetPriorityBadgeClass(@context.Priority?.Name)">@context.Priority?.Name</span>
                </MudTd>
                <MudTd DataLabel="Status">
                    <span class="@GetStatusBadgeClass(@context.Status?.Name)">@context.Status?.Name</span>
                </MudTd>
                <MudTd DataLabel="Action">
                      <MudButton Variant="Variant.Text" Color="Color.Primary" @onclick="() => ViewTaskDetails(context.TaskId)">
                        View
                    </MudButton>
                </MudTd>
                <MudTd>
                    @if (@context.Status?.Name.ToLower() == "completed")
                    {
                        <MudFab  Color="Color.Info"  StartIcon="@Icons.Material.Filled.Checklist"
                                Size="Size.Small" @onclick="() => TransferToCompleted(context.TaskId)" />

                    }
                </MudTd>
            </RowTemplate>
        </MudTable>

@code {
    private string searchString = String.Empty;
    private List<MyTask> tasks = new List<MyTask>();
    private MyTask newTask = new MyTask();
    private List<Lawyers> lawyers = new List<Lawyers>();
    private List<Case> cases = new List<Case>();
    private List<Priority> priorities = new List<Priority>();
    private List<MyTaskStatus> taskStatuses = new List<MyTaskStatus>();

    private string GetPriorityBadgeClass(string priority)
    {
        var badgeClass = priority.ToLower() switch
        {
            "high" => "badge bg-danger",
            "low" => "badge bg-success",
            _ => "badge bg-danger", // Use a different color for other priority values
        };

        return badgeClass;
    }

    private bool Search(Case mycase)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (mycase.Discription.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

    private string GetStatusBadgeClass(string status)
    {
        var badgeClass = status.ToLower() switch
        {
            "completed" => "badge bg-success",
            "pending" => "badge bg-warning",
            "in progress" => "badge bg-primary",
            _ => "badge bg-secondary", 
        };

        return badgeClass;
    }

    protected override async Task OnInitializedAsync()
    {
        await GetAllTasksAsync();
        lawyers = await lawyerService.GetAllAsync();
        cases = await caseService.GetAllAsync();
        priorities = await priorityService.GetAllAsync();
        taskStatuses = await taskStatusService.GetAllAsync();
    }

    private async Task<List<MyTask>> GetTasksWithRelatedDataAsync()
    {
        using (var scope = ServiceScopeFactory.CreateScope())
        {
            var context = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
            return await context.MyTasks
                .Include(t => t.Priority)
                .Include(t => t.Status)
                .Include(t => t.LawyerInfo)
                .Include(t => t.Case)
                .ToListAsync();
        }
    }

    private async Task GetAllTasksAsync()
    {
        tasks = await GetTasksWithRelatedDataAsync();
    }

    private async Task AssignTask()
    {
        using (var scope = ServiceScopeFactory.CreateScope())
        {
            var context = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();

            // Create and add the new task
            var task = new MyTask
                {
                    Description = newTask.Description,
                    FromDate = newTask.FromDate,
                    DueDate = newTask.DueDate,
                    PriorityId = newTask.PriorityId,
                    StatusId = newTask.StatusId,
                    LawyerId = newTask.LawyerId,
                    CaseId = newTask.CaseId
                };

            context.MyTasks.Add(task);

            // Fetch the case and lawyer entities
            var legalCase = await context.Cases.FindAsync(newTask.CaseId);
            var lawyer = await context.Lawyers.FindAsync(newTask.LawyerId);

            // Associate the case with the lawyer
            if (legalCase != null && lawyer != null)
            {
                if (!lawyer.AssignedCases.Contains(legalCase))
                {
                    lawyer.AssignedCases.Add(legalCase);
                    context.Lawyers.Update(lawyer);
                }
            }

            await context.SaveChangesAsync();

            Snackbar.Add("Task assigned successfully", Severity.Success);
            newTask = new MyTask(); 
            await GetAllTasksAsync();
        }
    }


        private void ViewTaskDetails(int taskId)
    {
        Navigation.NavigateTo($"/taskdetails/{taskId}");
    }

    private async Task TransferToCompleted(int taskId)
    {
        using (var scope = ServiceScopeFactory.CreateScope())
        {
            var context = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
            var task = await context.MyTasks.FindAsync(taskId);

            if (task != null)
            {
                task.StatusId = taskStatuses.FirstOrDefault(s => s.Name.ToLower() == "completed").StatusId;
                context.MyTasks.Update(task);
                await context.SaveChangesAsync();

                Snackbar.Add("Task transferred to completed.", Severity.Success);

                // Remove the task from the list and refresh the table
                tasks.Remove(tasks.FirstOrDefault(t => t.TaskId == taskId));
                StateHasChanged();

                Navigation.NavigateTo("/completedtasks"); // Navigate to completed tasks page
            }
        }
    }
}
