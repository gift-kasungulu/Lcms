@page "/assigntask"
@attribute [Authorize(Roles = "Admin, Team")]

@using Microsoft.EntityFrameworkCore
@using LegalCaseManagement.Data
@using LegalCaseManagement.Data.LegalServices
@using LegalCaseManagement.Domain
@using LegalCaseManagement.Service
@inject MyTaskService myTaskService
@inject LawyerService lawyerService
@inject CaseService caseService
@inject PriorityService priorityService
@inject TaskStatusService taskStatusService
@inject IServiceScopeFactory ServiceScopeFactory
@inject ISnackbar Snackbar

<MudCard>
    <MudCardContent>
        <MudText Typo="Typo.h6" Class="mb-4">Assign Task</MudText>
        <EditForm Model="newTask" OnValidSubmit="AssignTask">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12" sm="6" md="4">
                    <MudTextField @bind-Value="newTask.Description" Label="Description" Required="true" />
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudDatePicker @bind-Date="newTask.FromDate" Label="From Date" />
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudDatePicker @bind-Date="newTask.DueDate" Label="Due Date" />
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudSelect @bind-Value="newTask.PriorityId" Label="Priority" Required="true">
                        @foreach (var priority in priorities)
                        {
                            <MudSelectItem Value="@priority.PriorityId">@priority.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudSelect @bind-Value="newTask.StatusId" Label="Task Status" Required="true">
                        @foreach (var status in taskStatuses)
                        {
                            <MudSelectItem Value="@status.StatusId">@status.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" sm="6" md="4">
                    <MudSelect @bind-Value="newTask.LawyerId" Label="Assigned Lawyer" Required="true">
                        @foreach (var lawyer in lawyers)
                        {
                            <MudSelectItem Value="@lawyer.LawyerId">@lawyer.LFirstName @lawyer.LLastName</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudSelect @bind-Value="newTask.CaseId" Label="Case" Required="true">
                        @foreach (var legalCase in cases)
                        {
                            <MudSelectItem Value="@legalCase.CaseId">@legalCase.Discription</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            </MudGrid>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit" Class="mt-4">Assign Task</MudButton>
        </EditForm>
    </MudCardContent>
</MudCard>

<br />
<br />
<MudCard>
    
    <MudCardContent>
        <MudTable Items="tasks">
             <ToolBarContent>
        <MudText Typo="Typo.h6">Tasks</MudText>
        <MudSpacer />
       
    </ToolBarContent>
            <HeaderContent>
                <MudTh>Due Date</MudTh>
                <MudTh>Case Description</MudTh>
                <MudTh>Assigned Lawyer</MudTh>
                <MudTh>Priority</MudTh>
                <MudTh>Status</MudTh>
            </HeaderContent>
            <RowTemplate>
    <MudTd DataLabel="DueDate">@context.DueDate</MudTd>
    <MudTd DataLabel="Description">@context.Case?.Discription</MudTd>
    <MudTd DataLabel="AssignedLawyer">@context.AssignedLawyer?.LFirstName @context.AssignedLawyer?.LLastName</MudTd>
    <MudTd DataLabel="Priority">
        <span class="@GetPriorityBadgeClass(context.Priority?.Name)">@context.Priority?.Name</span>
    </MudTd>
    <MudTd DataLabel="Status">
        <span class="@GetStatusBadgeClass(context.Status?.Name)">@context.Status?.Name</span>
    </MudTd>
</RowTemplate>
        </MudTable>
    </MudCardContent>
</MudCard>


@code {
    private List<MyTask> tasks = new List<MyTask>();
    private MyTask newTask = new MyTask();
    private List<Lawyers> lawyers = new List<Lawyers>();
    private List<Case> cases = new List<Case>();
    private List<Priority> priorities = new List<Priority>();
    private List<MyTaskStatus> taskStatuses = new List<MyTaskStatus>();

private string GetPriorityBadgeClass(string priority)
{
    var badgeClass = priority.ToLower() switch
    {
        "high" => "badge bg-danger",
        "low" => "badge bg-success",
        _ => "badge bg-warning", // Use a different color for other priority values
    };

    return badgeClass;
}

private string GetStatusBadgeClass(string status)
{
    var badgeClass = status.ToLower() switch
    {
        "completed" => "badge bg-success",
        "pending" => "badge bg-warning",
        "in progress" => "badge bg-primary",
        _ => "badge bg-secondary", // Use a different color for other status values
    };

    return badgeClass;
}

    protected override async Task OnInitializedAsync()
    {
        await GetAllTasksAsync();
        lawyers = await lawyerService.GetAllAsync();
        cases = await caseService.GetAllAsync();
        priorities = await priorityService.GetAllAsync();
        taskStatuses = await taskStatusService.GetAllAsync();
    }

   private async Task<List<MyTask>> GetTasksWithRelatedDataAsync()
{
    using (var scope = ServiceScopeFactory.CreateScope())
    {
        var context = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
        return await context.MyTasks
            .Include(t => t.Priority)
            .Include(t => t.Status)
            .Include(t => t.AssignedLawyer)
            .Include(t => t.Case)
            .ToListAsync();
    }
}

private async Task GetAllTasksAsync()
{
    tasks = await GetTasksWithRelatedDataAsync();
    


}

    private async Task AssignTask()
{
    // Set the AssignedLawyerId of the newTask object to the selected lawyer's Id
    //newTask.AssignedLawyerId = newTask.LawyerId;

    var result = await myTaskService.AddAsync(newTask);
    if (result)
    {
        Snackbar.Add("Task assigned successfully", Severity.Success);
        newTask = new MyTask(); // Reset the form
        await GetAllTasksAsync();
    }
    else
    {
        Snackbar.Add("Failed to assign task", Severity.Error);
    }
    await GetAllTasksAsync();
}

}
