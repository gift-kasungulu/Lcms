@page "/dashboard"
@attribute [Authorize(Roles = "Team, Admin")]

@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@using LegalCaseManagement.Data
@using LegalCaseManagement.Data.LegalServices
@using MudBlazor
@inject ISnackbar snackbar
@inject CaseTypeService caseTypeService
@inject CaseStatusService caseStatusService
@inject CaseService caseService
@inject IServiceScopeFactory ServiceScopeFactory
@inject UserManager<ApplicationUser> _userManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject PdfService pdfService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavManager
@inject IHttpContextAccessor HttpContextAccessor

<PageTitle>Dashboard</PageTitle>

<div class="container-fluid">
    <MudText Typo="Typo.h6" Class="mb-4">Dashboard</MudText>
    <div class="row">
        <div class="col-md-3">
            <div class="card ">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h1 class="card-text mb-0">@clients.Count</h1>
                            <p class="card-title mb-0">Clients</p>
                        </div>
                        <i class="bi bi-people-fill card-icon-p"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card ">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h1 class="card-text mb-0">@caseList.Count</h1>
                            <p class="card-title mb-0">Cases</p>
                        </div>
                        <i class="bi bi-folder-fill card-icon-y"></i>
                    </div>
                </div>
            </div>
        </div>
        <!-- for the won cases  -->
        <div class="col-md-3">
            <div class="card ">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h1 class="card-text mb-0">@highPriorityCases.Count</h1>
                            <p class="card-title mb-0">Won Cases</p>
                        </div>
                        <i class="bi bi-trophy-fill card-icon-r"></i>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-3">
            <div class="card ">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h1 class="card-text mb-0">@decidedCases.Count</h1>
                            <p class="card-title mb-0">Decided Cases</p>
                        </div>
                        <i class="bi bi-check2-circle card-icon-g"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<br />
<MudGrid>
    <MudItem xs="12">
        <MudPaper Class="pa-4 rounded">
            <MudText Typo="Typo.h6" Class="mb-4">Cause List</MudText>
            <MudDatePicker @bind-Date="selectedDate" Label="Select Date" />
            <br />
            <MudButton OnClick="SearchCases" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Search"
                       Color="Color.Primary" Class="ml-auto">Search</MudButton>
            <MudTable Items="filteredCaseList" Filter="new Func<Case,bool>(Search)" Class="mt-4">
                <HeaderContent>
                    <MudTh>No</MudTh>
                    <MudTh>Case No</MudTh>
                    <MudTh>Case</MudTh>
                    <MudTh>Next Date</MudTh>
                    <MudTh>Status</MudTh>
                    <MudTh>Action</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="No">@context.CaseId</MudTd>
                    <MudTd DataLabel="Case No">@context.CaseId</MudTd>
                    <MudTd DataLabel="Case">@context.Petitioner VS @context.Defendant</MudTd>
                    <MudTd DataLabel="Next Date">@context.EndDate?.ToString("dd-MM-yyyy")</MudTd>
                    <MudTd DataLabel="Status">@context.CaseStatus.StatusName</MudTd>
                    <MudTd DataLabel="Action">
                        <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                            <MudMenuItem>
                                <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.DateRange"
                                        Size="Size.Small" />
                            </MudMenuItem>
                            <MudMenuItem>
                                <MudFab Color="Color.Error" StartIcon="@Icons.Material.Filled.SwapHoriz"
                                        Size="Size.Small" />
                            </MudMenuItem>
                        </MudMenu>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudPaper>
    </MudItem>
</MudGrid>
<br />

@code {
    private string searchString = "";
    private Case newCase = new Case();
    private List<Case> caseList = new List<Case>();
    private List<ApplicationUser> clients = new List<ApplicationUser>();
    private List<CaseType> caseTypes = new List<CaseType>();
    private List<CaseStatus> caseStatuses = new List<CaseStatus>();
    private bool isModalVisible = false;
    private string modalClass => isModalVisible ? "show" : "";
    private string modalDisplay => isModalVisible ? "block" : "none";
    private List<Case> newCases = new List<Case>();
    private List<Case> abandonedCases = new List<Case>();
    private List<Case> highPriorityCases = new List<Case>();
    private List<Case> decidedCases = new List<Case>();
    private DateTime? selectedDate;
    private List<Case> filteredCaseList = new List<Case>();
    private List<Case> filteredCases = new List<Case>();
    private IJSObjectReference? calendarInstance;
    private IJSObjectReference? module;

    protected override async Task OnInitializedAsync()
    {
        await GetAllAsync();
        clients = (await _userManager.GetUsersInRoleAsync("Client")).ToList();
        caseTypes = await caseTypeService.GetAllAsync();
        caseStatuses = await caseStatusService.GetAllAsync();
        selectedDate = DateTime.Today;
        newCases = caseList.Where(c => c.CaseType.TypeName.ToLower() == "new").ToList();
        abandonedCases = caseList.Where(c => c.CaseType.TypeName.ToLower() == "Lost").ToList(); // and this for lost cases 
        highPriorityCases = caseList.Where(c => c.CaseType.TypeName.ToLower() == "won").ToList(); //lets use this for won cases instead, to hide the bug
        decidedCases = caseList.Where(c => c.CaseStatus.StatusName.ToLower() == "completed").ToList();
    }

    private async void NavigateToAssignedCases()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await _userManager.GetUserAsync(authState.User);

        if (user != null)
        {
            NavManager.NavigateTo($"/assignedcases/{user.Id}");
        }
    }

    private async Task DownloadPdf()
    {
        byte[] pdfBytes = pdfService.GeneratePdfFromCases(filteredCases);
        await JSRuntime.InvokeAsync<object>("saveAsFile", $"filtered_cases.pdf", Convert.ToBase64String(pdfBytes));
    }

    private bool Search(Case mycase)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (mycase.Petitioner.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

    private void SearchCases()
    {
        if (selectedDate.HasValue)
        {
            filteredCaseList = caseList.Where(c => c.EndDate.HasValue && c.EndDate.Value.Date == selectedDate.Value.Date).ToList();
        }
        else
        {
            filteredCaseList = new List<Case>();
        }
    }

    private async Task Add()
    {
        using (var scope = ServiceScopeFactory.CreateScope())
        {
            var context = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
            if (newCase.CaseTypeId != 0)
            {
                var existingCaseType = await context.CaseType.FindAsync(newCase.CaseTypeId);
                if (existingCaseType != null)
                {
                    newCase.CaseType = existingCaseType;
                    context.Entry(existingCaseType).State = EntityState.Unchanged;
                }
            }
            if (newCase.StatusId != 0)
            {
                var existingCaseStatus = await context.CaseStatus.FindAsync(newCase.StatusId);
                if (existingCaseStatus != null)
                {
                    newCase.CaseStatus = existingCaseStatus;
                    context.Entry(existingCaseStatus).State = EntityState.Unchanged;
                }
            }
            if (newCase.CaseId == 0)
            {
                context.Cases.Add(newCase);
                snackbar.Add("New case added successfully.", Severity.Success);
            }
            else
            {
                context.Cases.Update(newCase);
                snackbar.Add("Case updated successfully.", Severity.Success);
            }
            await context.SaveChangesAsync();
        }
        isModalVisible = false;
        await GetAllAsync();
    }

    public void Update(Case caseRecord)
    {
        OpenModal();
        newCase = caseRecord;
        StateHasChanged();
    }

    private async Task<List<ApplicationUser>> GetUsersAsync()
    {
        using (var scope = ServiceScopeFactory.CreateScope())
        {
            var userManager = scope.ServiceProvider.GetRequiredService<UserManager<ApplicationUser>>();
            return await userManager.Users.ToListAsync();
        }
    }

    private async Task<List<Case>> GetCasesWithRelatedDataAsync()
    {
        using (var scope = ServiceScopeFactory.CreateScope())
        {
            var context = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
            return await context.Cases
                .Include(c => c.AppUser)
                .Include(c => c.CaseStatus)
                .Include(c => c.CaseType)
                .ToListAsync();
        }
    }

    private async Task GetAllAsync()
    {
        var cases = await GetCasesWithRelatedDataAsync();
        var users = await GetUsersAsync();
        foreach (var caseItem in cases)
        {
            caseItem.AppUser = users.FirstOrDefault(u => u.Id == caseItem.UserId);
        }
        caseList = cases;
    }

    private void OpenModal()
    {
        isModalVisible = true;
    }

    private void CloseModal()
    {
        isModalVisible = false;
    }
}
