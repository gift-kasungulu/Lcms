@page "/appointments"
@attribute [Authorize(Roles = "Client, Admin, Team")]

@using LegalCaseManagement.Data
@using LegalCaseManagement.Domain
@using LegalCaseManagement.Service
@using Microsoft.AspNetCore.Identity
@using MudBlazor
@inject AppointmentService AppointmentService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager

<PageTitle>Appointments</PageTitle>
@page "/my-appointments"
@attribute [Authorize(Roles = "Client, Admin, Team")]

<PageTitle>My Appointments</PageTitle>

<style>
    body {
        background-color: #F5F5F5;
    }
</style>

<MudCard Elevation="3">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h4">My Appointments</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="@(() => Navigation.NavigateTo("/fetchdata"))">Create Appointment</MudButton>
        </CardHeaderActions>
    </MudCardHeader>

    <MudCardContent>
        <MudTable Items="@appointments" Hover="true" Loading="@_loading"
                  LoadingProgressColor="Color.Info" Dense="true" Striped="true" Bordered="true" Elevation="0">
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<Appointment, object>(x=>x.ClientName)">Client Name</MudTableSortLabel></MudTh>
                <MudTh>Mobile</MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Appointment, object>(x=>x.Date)">Date</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Appointment, object>(x=>x.Time)">Time</MudTableSortLabel></MudTh>
                <MudTh>Action</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Client Name">@context.ClientName</MudTd>
                <MudTd DataLabel="Mobile">@context.MobileNo</MudTd>
                <MudTd DataLabel="Date">
                    @context.Date?.ToShortDateString() ?? "N/A"
                </MudTd>
                <MudTd DataLabel="Time">
                    @context.Time.ToString("hh\\:mm")
                </MudTd>
                <MudTd DataLabel="Action">
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
                        <MudMenuItem OnClick="@(() => ViewAppointmentsDetails(context.Id))">
                            <MudIcon Icon="@Icons.Material.Filled.Visibility" Class="mr-2" /> View
                        </MudMenuItem>
                        <MudMenuItem OnClick="@(() => EditAppointment(context.Id))">
                            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-2" /> Edit
                        </MudMenuItem>
                        <MudMenuItem OnClick="@(() => DeleteAppointment(context.Id))">
                            <MudIcon Icon="@Icons.Material.Filled.Delete" Class="mr-2" /> Delete
                        </MudMenuItem>
                    </MudMenu>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudCardContent>
</MudCard>

@code {
    private List<Appointment> appointments = new List<Appointment>();
    private bool _loading = true;
    private string searchString = "";
    private DateTime? fromDate;
    private DateTime? toDate;
    private ApplicationUser? currentUser;
    private Appointment appointment = new Appointment();
    private bool showModal = false;

    protected override async Task OnInitializedAsync()
    {
        currentUser = await UserManager.GetUserAsync(SignInManager.Context.User);
        await LoadAppointments();
    }

    private void EditAppointment(int appointmentId)
    {
        Navigation.NavigateTo($"/editappointments/{appointmentId}");
    }

    private void StartEditingAppointment(Appointment appt)
    {
        appointment = appt;  // Load the existing appointment
        showModal = true;  // Show the modal
    }

    private async Task SaveAppointment()
    {
        // Assuming you have the time as a string from the input
        var timeValue = appointment.Time.ToString(); // Get the time as string
        appointment.Time = TimeSpan.Parse(timeValue); // Convert it to TimeSpan

        await AppointmentService.UpdateAppointment(appointment);
        Snackbar.Add("Appointment updated successfully", Severity.Success);
    }


    

    private void CloseModal()
    {
        showModal = false;
    }

    private void ViewAppointmentsDetails(int id)
    {
        Navigation.NavigateTo($"/viewappointment/{id}");
    }

    private async Task LoadAppointments()
    {
        _loading = true;

        var user = await UserManager.GetUserAsync(SignInManager.Context.User);
        var roles = await UserManager.GetRolesAsync(user);

        if (roles.Contains("Admin"))
        {
            appointments = (await AppointmentService.GetAllAppointments()).ToList();
        }
        else if (roles.Contains("Team"))
        {
            appointments = (await AppointmentService.GetAppointmentsByTeamMember(user.Id)).ToList();
        }
        else if (roles.Contains("Client"))
        {
            appointments = (await AppointmentService.GetAppointmentsByClient(user.Id)).ToList();
        }

        _loading = false;
    }

    private async Task SearchAppointments()
    {
        _loading = true;
        appointments = (await AppointmentService.GetAppointmentsByDateRange(fromDate, toDate)).ToList();
        _loading = false;
    }

    private void ClearFilters()
    {
        fromDate = null;
        toDate = null;
        searchString = "";
        LoadAppointments();
    }

    

    private async Task DeleteAppointment(int id)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Warning",
            "Deleting cannot be undone!",
            yesText: "Delete", cancelText: "Cancel",
            options: new DialogOptions { CloseOnEscapeKey = true });

        if (result ?? false)
        {
            await AppointmentService.DeleteAppointment(id);
            await LoadAppointments();
            Snackbar.Add("Appointment deleted successfully", Severity.Success);
        }
    }

    private bool FilterFunc(Appointment appointment)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (appointment.ClientName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (appointment.MobileNo.Contains(searchString))
            return true;
        return false;
    }
}