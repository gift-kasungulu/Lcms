@page "/"
<PageTitle>Home</PageTitle>

@using LegalCaseManagement.Data
@inject NavigationManager Nav
@inject AuthenticationStateProvider AuthenticationStateProvider
@using LegalCaseManagement.Domain
@using LegalCaseManagement.Service
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using Microsoft.AspNetCore.Identity
@inject LawyerService lawyerService
@inject CaseService caseService
@inject ISnackbar snackbar
@inject UserManager<ApplicationUser> UserManager
@inject NoticeService noticeService
@inject IJSRuntime JSRuntime

<MudGrid>
    <MudItem xs="12">
        <MudText Typo="Typo.h6">Notice</MudText>
        @foreach (var notice in notices)
        {
            <div class="notice-item">
                <div class="notice-icon">
                    <i class="fas fa-info-circle"></i>
                </div>
                <div class="notice-content">
                    @notice.Title
                </div>
                <div class="notice-action">
                    <MudButton Color="Color.Primary" Variant="Variant.Text" OnClick="() => DownloadPdf(notice.Id)">Read</MudButton>
                </div>
            </div>
        }
    </MudItem>
</MudGrid>
<br />
@if (isClient)
{
    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
        <MudTabPanel Text="Advocates">
            <MudTable Items="lawyersList" Filter="new Func<Lawyers,bool>(Searchrec)" @bind-lawyersList="lawyersList">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Available Advocates</MudText>
                    <MudSpacer />
                    <MudTextField @bind-Value="searchString" Placeholder="Search Here" IconSize="Size.Medium"
                                  StartIcon="@Icons.Material.Filled.Search" Class="mt-0">Search Here</MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh></MudTh>
                    <MudTh></MudTh>
                    <MudTh></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="FirstName">@context.FirstName</MudTd>
                    <MudTd DataLabel="LastName">@context.LastName</MudTd>
                    <MudTd DataLabel="Actions">
                        <MudButton Variant="Variant.Text" Color="Color.Info"
                                   OnClick="@(() => ViewLawyerDetails(context))">Enquire</MudButton>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </MudTabPanel>
        <MudTabPanel Text="Recent Cases">
            <MudPaper xs="12" sm="6">
                <MudList Clickable="true">
                    <MudListSubheader>
                        Recent cases
                    </MudListSubheader>
                    @foreach (var recentCase in GetRecentCases())
                    {
                        <MudListItem Avatar="@Icons.Material.Filled.Work">
                            @recentCase.Discription
                            @if (IsCaseNew(recentCase))
                            {
                                <MudBadge Color="Color.Secondary">.New</MudBadge>
                            }
                        </MudListItem>
                    }
                </MudList>
            </MudPaper>
        </MudTabPanel>
    </MudTabs>
}

@code {
    private List<Notice> notices = new List<Notice>();
    private List<Case> caseList = new List<Case>();
    private List<Lawyers> lawyersList = new List<Lawyers>();
    private string searchString = " ";
    private string userName;
    private bool isClient = false; // set it to false by default

    protected override async Task OnInitializedAsync()
    {
        lawyersList = lawyerService.GetAll();
        caseList = await caseService.GetAllAsync();
        notices = await noticeService.GetAllNoticesAsync();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var isAuthenticated = user.Identity.IsAuthenticated;

        if (isAuthenticated)
        {
            userName = user.FindFirst(c => c.Type == ClaimTypes.Name)?.Value;
            await CheckUserRole();
        }
        else
        {
            Nav.NavigateTo("/Identity/Account/Login", forceLoad: true);
        }
    }

    private async Task CheckUserRole()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var appUser = await UserManager.GetUserAsync(user);
            isClient = await UserManager.IsInRoleAsync(appUser, "Client");
        }
    }

    private async Task DownloadPdf(int noticeId)
    {
        var notice = await noticeService.GetNoticeByIdAsync(noticeId);

        if (notice?.PdfFileContent != null)
        {
            var fileName = notice.PdfFileName;
            var fileContent = notice.PdfFileContent;
            var base64 = Convert.ToBase64String(fileContent);
            var dataUrl = $"data:application/pdf;base64,{base64}";

            // Call the JavaScript function from site.js
            await JSRuntime.InvokeVoidAsync("downloadPdf", dataUrl, fileName);
        }
        else
        {
            snackbar.Add("The document is not available.", Severity.Warning);
        }
    }


    private List<Case> GetRecentCases()
    {
        // Filter caseList to get recent cases (e.g., within the last 48 hours)
        return caseList.Where(c => IsCaseRecent(c)).ToList();
    }

    private bool IsCaseRecent(Case myCase)
    {
        // Determine if the case is recent (e.g., within the last 48 hours)
        return myCase.StartDate >= DateTime.Now.AddDays(-2);
    }

    private bool IsCaseNew(Case myCase)
    {
        // Determine if the case is new (based on Case Type, assuming Case Type ID 1 represents "New")
        return myCase.CaseTypeId == 1;
    }

    private void ViewLawyerDetails(Lawyers lawyer)
    {
        Nav.NavigateTo($"/details/{lawyer.Id}");
    }

    private bool Searchrec(Lawyers lawyer)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        return lawyer.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }
}
