@page "/"
<PageTitle>Home</PageTitle>

@using LegalCaseManagement.Data
@inject NavigationManager Nav
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject LawyerService lawyerService
@inject CaseService caseService
@inject ISnackbar snackbar

<MudCard>
    <MudCardContent>
        <MudText Typo="Typo.h4">
            Welcome, @userName
        </MudText>
        <br />
        <MudGrid>
            


        </MudGrid>
        <br />
        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
            <MudTabPanel Text="Advocates">
                <MudTable  Items="lawyersList" Filter="new Func<Lawyers,bool>(Searchrec)" @bind-lawyersList="lawyersList">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Advocates</MudText>
                        <MudSpacer />
                        <MudTextField @bind-Value="searchString" Placeholder="Search Here" IconSize="Size.Medium"
                            StartIcon="@Icons.Material.Filled.Search" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        
                        <MudTh>FIRST NAME</MudTh>
                        <MudTh>Last Name</MudTh>
                        <MudTh>Email</MudTh>
                        <MudTh>Phone</MudTh>
                        <MudTh>Experience</MudTh>
                        <MudTh>Win %</MudTh>
                        
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        
                        <MudTd DataLabel="FirstName">@context.LFirstName</MudTd>
                        <MudTd DataLabel="LastName">@context.LLastName</MudTd>
                        <MudTd DataLabel="Email">@context.UserName</MudTd>
                        <MudTd DataLabel="Phone">@context.Phone</MudTd>
                        <MudTd DataLabel="Experince">@context.ExperienceYears</MudTd>
                        <MudTd DataLabel="Win">@context.CaseWinPercentage</MudTd>
                        
                        <MudTd DataLabel="Actions">
                            <MudFab Color="Color.Info" Size="Size.Small" StartIcon="@Icons.Material.Filled.ReadMore"
                                OnClick="@(()=>ViewLawyerDetails(context))"></MudFab>
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            </MudTabPanel>
            <MudTabPanel Text="Recent Cases">
                <MudPaper xs="12" sm="6">
                    <MudList Clickable="true">
                        <MudListSubheader>
                            Recent cases
                        </MudListSubheader>
                        @foreach (var recentCase in GetRecentCases())
                        {
                            <MudListItem Avatar="@Icons.Material.Filled.Work">
                                @recentCase.Discription
                                @if (IsCaseNew(recentCase))
                                {
                                    <MudBadge Color="Color.Secondary">.                          New</MudBadge>
                                }
                            </MudListItem>
                        }
                    </MudList>
                </MudPaper>
            </MudTabPanel>
            <MudTabPanel Text="About">
                <MudText>Content Three</MudText>
            </MudTabPanel>e
        </MudTabs>
    </MudCardContent>
</MudCard>

@code {
    private Lawyers lawyers = new Lawyers();
    private List<Case> caseList = new List<Case>();
    private List<Lawyers> lawyersList = new List<Lawyers>();
    private string searchString = " ";
    private string userName;

    protected override async Task OnInitializedAsync()
    {
        lawyersList = lawyerService.GetAll();
        caseList = await caseService.GetAllAsync();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        var user = authState.User;
        var isAuthenticated = user.Identity.IsAuthenticated;

        if (isAuthenticated)
        {
            userName = user.FindFirst(c => c.Type == ClaimTypes.Name)?.Value;
        }
        else
        {
            Nav.NavigateTo("/Identity/Account/Login", forceLoad: true);
        }
    }

    private List<Case> GetRecentCases()
    {
        // Filter caseList to get recent cases (e.g., within the last 48 hours)
        return caseList.Where(c => IsCaseRecent(c)).ToList();
    }

    private bool IsCaseRecent(Case myCase)
    {
        // Determine if the case is recent (e.g., within the last 48 hours)
        return myCase.StartDate >= DateTime.Now.AddDays(-2);
    }

    private bool IsCaseNew(Case myCase)
    {
        // Determine if the case is new (based on Case Type, assuming Case Type ID 1 represents "New")
        return myCase.CaseTypeId == 1;
    }

    private void ViewLawyerDetails(Lawyers lawyer)
    {
        Nav.NavigateTo($"/details/{lawyer.Id}");
    }

    private bool Searchrec(Lawyers lawyer)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (lawyer.LFirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }
}
