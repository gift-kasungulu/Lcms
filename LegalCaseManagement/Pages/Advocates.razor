@page "/advocates"
@attribute [Authorize(Roles = "Admin")]
@using LegalCaseManagement.Data
@using Microsoft.AspNetCore.Identity
@inject LawyerService lawyerService
@inject IJSRuntime jsRuntime 
@using MailKit.Net.Smtp
@inject ISnackbar snackbar
@inject UserManager<ApplicationUser> _userManager
@inject RoleManager<IdentityRole> _roleManager
@inject EmailService emailService

<PageTitle>Advocates</PageTitle>

@if (showModal)
{
    <div class="modal fade show" tabindex="-1" style="display: block;">
        <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Add Lawyer</h4>
                    <button type="button" class="btn-close" @onclick="ToggleModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="lawyers" OnValidSubmit="Add">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-grid">
                            <div class="grid-item">
                                <label class="form-label">First Name</label>
                                <input class="form-control" placeholder="Enter First Name" @bind-value="lawyers.FirstName" />
                            </div>
                            <div class="grid-item">
                                <label class="form-label">Last Name</label>
                                <input class="form-control" placeholder="Enter Last Name" @bind-value="lawyers.LastName" />
                            </div>
                            <div class="grid-item">
                                <label class="form-label">Phone Number</label>
                                <input class="form-control" placeholder="Enter Phone Number" @bind-value="lawyers.Phone" />
                            </div>
                            <div class="grid-item">
                                <label class="form-label">Email</label>
                                <input class="form-control" placeholder="Enter Email" @bind-value="lawyers.Email" maxlength="255" />
                            </div>
                            <div class="grid-item">
                                <label class="form-label">Country</label>
                                <input class="form-control" placeholder="Enter Country" @bind-value="lawyers.Country" />
                            </div>
                            <div class="grid-item">
                                <label class="form-label">City</label>
                                <input class="form-control" placeholder="Enter City" @bind-value="lawyers.City" />
                            </div>
                            <div class="grid-item">
                                <label class="form-label">Age</label>
                                <input type="number" class="form-control" placeholder="Enter Age" @bind-value="lawyers.Age" />
                            </div>
                            <div class="grid-item">
                                <label class="form-label">Case Type</label>
                                <input type="text" class="form-control" placeholder="Enter Case Type" @bind-value="lawyers.CaseType" />
                            </div>
                            <div class="grid-item">
                                <label class="form-label">Experience Years</label>
                                <input type="number" class="form-control" placeholder="Enter Experience Years" @bind-value="lawyers.ExperienceYears" />
                            </div>
                            <div class="grid-item">
                                <label class="form-label">Upload Image</label>
                                <InputFile OnChange="HandleImageUpload" />
                                
                            </div>
                            <div class="grid-item">
                                <label class="form-label">Win Percentage</label>
                                <input type="number" class="form-control" placeholder="Enter Win Percentage" @bind-value="lawyers.CaseWinPercentage" />
                            </div>
                            <div class="grid-item">
                                <label class="form-label">Gender</label>
                                <select class="form-control" @bind="lawyers.Gender">
                                    <option value="">Select Gender</option>
                                    <option value="Male">Male</option>
                                    <option value="Female">Female</option>
                                    <option value="Other">Other</option>
                                </select>
                            </div>
                            <div class="grid-item">
                                <label class="form-label">Password</label>
                                <input type="password" class="form-control" placeholder="Enter Password" @bind-value="password" />
                            </div>
                        </div>
                        <button type="submit" class="btn btn-primary">Submit</button>
                    </EditForm>

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" @onclick="ToggleModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@if (showEditModal)
{
    <div class="modal fade show" tabindex="-1" style="display: block;">
        <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Edit Lawyer</h4>
                    <button type="button" class="btn-close" @onclick="ToggleEditModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="editLawyer" OnValidSubmit="Update">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="mb-3 mt-3">
                            <label class="form-label">First Name</label>
                            <input class="form-control" placeholder="Enter First Name" @bind-value="editLawyer.FirstName" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Last Name</label>
                            <input class="form-control" placeholder="Enter Last Name" @bind-value="editLawyer.LastName" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Phone Number</label>
                            <input class="form-control" placeholder="Enter Phone Number" @bind-value="editLawyer.Phone" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Email</label>
                            <input class="form-control" placeholder="Enter Email" @bind-value="editLawyer.Email" maxlength="255" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Country</label>
                            <input class="form-control" placeholder="Enter Country" @bind-value="editLawyer.Country" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">City</label>
                            <input class="form-control" placeholder="Enter City" @bind-value="editLawyer.City" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Age</label>
                            <input type="number" class="form-control" placeholder="Enter Age" @bind-value="editLawyer.Age" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Case Type</label>
                            <input type="text" class="form-control" placeholder="Enter Case Type" @bind-value="editLawyer.CaseType" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Experience Years</label>
                            <input type="number" class="form-control" placeholder="Enter Experience Years" @bind-value="editLawyer.ExperienceYears" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Image</label>
                            <InputFile OnChange="HandleEditSelected" />
                            @if (!string.IsNullOrEmpty(editLawyer.ImageUrl))
                            {
                                <img src="@editLawyer.ImageUrl" alt="Lawyer Image" style="max-width: 100px; max-height: 100px;" />
                            }
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Win Percentage</label>
                            <input type="number" class="form-control" placeholder="Enter Win Percentage" @bind-value="editLawyer.CaseWinPercentage" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Gender</label>
                            <select class="form-control" @bind="editLawyer.Gender">
                                <option value="">Select Gender</option>
                                <option value="Male">Male</option>
                                <option value="Female">Female</option>
                                <option value="Other">Other</option>
                            </select>
                        </div>
                        <button type="submit" class="btn btn-primary">Submit</button>
                    </EditForm>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" @onclick="ToggleEditModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}


<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="ToggleModal">Add Advocate</MudButton>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudTable Items="lawyersList" Filter="new Func<Lawyers,bool>(Searchrec)" @bind-lawyersList="lawyersList">

            <ToolBarContent>
                <MudText Typo="Typo.h6">Advocates</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchString" Placeholder="Search Here" IconSize="Size.Medium"
                    StartIcon="@Icons.Material.Filled.Search" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Image</MudTh>
                <MudTh>Fist Name</MudTh>
                <MudTh>Last Name</MudTh>
                <MudTh>Email</MudTh>
                <MudTh>Phone</MudTh>
                <MudTh>Experience</MudTh>
                <MudTh>Win %</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Image">
                    @if (!string.IsNullOrEmpty(context.ImageUrl))
                    {
                        <img src="@context.ImageUrl" alt="Lawyer Image" style="border-radius: 50%; width: 50px; height: 50px;" />
                    }
                </MudTd>
                <MudTd DataLabel="FirstName">@context.FirstName</MudTd>
                <MudTd DataLabel="LastName">@context.LastName</MudTd>
                <MudTd DataLabel="Email">@context.UserName</MudTd>
                <MudTd DataLabel="Phone">@context.Phone</MudTd>
                <MudTd DataLabel="Experience">@context.ExperienceYears</MudTd>
                <MudTd DataLabel="Win">@context.CaseWinPercentage</MudTd>
                <MudTd DataLabel="Actions">
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                        <MudMenuItem >
                            <i class="bi bi-eye"></i>
                            View
                        </MudMenuItem>
                        <MudMenuItem OnClick="@(() => OpenEditModal(context))">
                            <i class="bi bi-pencil-fill"></i>
                            Update
                        </MudMenuItem>
                        <MudMenuItem OnClick="@(() => DeleteRec(context))">
                            <i class="bi bi-trash-fill"></i>
                            Delete
                        </MudMenuItem>
                    </MudMenu>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
        <br />
        <EditForm Model="request" OnValidSubmit="HandleValidSubmit">
                    <div class="mb-3">
                        <label class="form-label">Your Email</label>
                        <MudTextField @bind-Value="request.Email" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Message</label>
                        <MudTextField @bind-Value="request.Message" TextArea="true" />
                    </div>
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary">Send</MudButton>
                   
                </EditForm>
    </MudCardContent>
</MudCard>

@code {
    private Lawyers lawyers = new Lawyers();
    private List<Lawyers> lawyersList = new List<Lawyers>();
    private bool showModal = false;
    private string searchString = "";
    private string password = "";
    private Lawyers editLawyer = new Lawyers();
    private bool showEditModal = false;
    private string editPassword = "";
    private Lawyers selectedLawyer = new Lawyers(); // Used for editing
    private IBrowserFile imageFile;

    private RequestModel request = new RequestModel();

    protected override async Task OnInitializedAsync()
    {
        lawyersList = await lawyerService.GetAllAsync();
        
    }
    private void HandleImageUpload(InputFileChangeEventArgs e)
    {
        imageFile = e.File;
        lawyers.ImageFile = imageFile;
    }

    private async Task HandleEditSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var format = "image/png"; // you can use other formats too

        using (var stream = new MemoryStream())
        {
            await file.OpenReadStream().CopyToAsync(stream);
            var byteArray = stream.ToArray();
            var base64 = Convert.ToBase64String(byteArray);
            editLawyer.ImageUrl = $"data:{format};base64,{base64}";
        }
    }


    private void OpenEditModal(Lawyers lawyer)
{
    editLawyer = new Lawyers
    {
        Id = lawyer.Id,
        FirstName = lawyer.FirstName,
        LastName = lawyer.LastName,
        Email = lawyer.Email,
        Phone = lawyer.Phone,
        Country = lawyer.Country,
        City = lawyer.City,
        Age = lawyer.Age,
        CaseType = lawyer.CaseType,
        ExperienceYears = lawyer.ExperienceYears,
        CaseWinPercentage = lawyer.CaseWinPercentage,
        Gender = lawyer.Gender,
    };
    showEditModal = true;
}

private void ToggleEditModal()
{
    showEditModal = !showEditModal;
    if (!showEditModal)
    {
        editLawyer = new Lawyers(); // Reset the form when closing the modal
        editPassword = string.Empty; // Reset the password field
    }
}

    private async Task Update()
    {
        try
        {
            var result = await lawyerService.UpdateLawyerAsync(editLawyer);

            if (result)
            {
                snackbar.Add("Lawyer Detais Updated ", Severity.Success);
                
            }
            else
            {
                
                // Update failed, handle failure scenario
                snackbar.Add("Failed to update lawyer", Severity.Error);
                
            }
        }
        catch (Exception ex)
        {
            // Handle exceptions
            snackbar.Add($"Failed to update lawyer: {ex.Message}", Severity.Error);
        }

    }

    private async Task HandleValidSubmit()
    {
        try
        {
            await emailService.SendEmailAsync(request.Email, "Law Master Legal Case Management", request.Message, null);
            await jsRuntime.InvokeVoidAsync("alert", "Email sent successfully!");
        }
        catch (SmtpCommandException smtpEx)
        {
            await jsRuntime.InvokeVoidAsync("alert", $"SMTP error: {smtpEx.Message}");
        }
        catch (SmtpProtocolException protocolEx)
        {
            await jsRuntime.InvokeVoidAsync("alert", $"SMTP protocol error: {protocolEx.Message}");
        }
        catch (Exception ex)
        {
            await jsRuntime.InvokeVoidAsync("alert", $"An error occurred: {ex.Message}");
        }
    }

     private class RequestModel
    {
        public string? Email { get; set; }
        public string? Message { get; set; }
    }

    private async Task DeleteRec(Lawyers rec)
{
    bool confirmed = await jsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete?");
    if (confirmed)
    {
        if (await lawyerService.DeleteAsync(rec))
        {
            lawyersList = await lawyerService.GetAllAsync();
            snackbar.Add("Lawyer was removed successfully", Severity.Info);
        }
        else
        {
            snackbar.Add("Operation failed. Try again later", Severity.Error);
        }
    }
}
    
    private async Task Add()
    {
        try
        {
            if (imageFile != null)
            {
                var file = imageFile;
                var format = "image/png";

                using (var stream = new MemoryStream())
                {
                    await file.OpenReadStream().CopyToAsync(stream);
                    var byteArray = stream.ToArray();
                    var base64 = Convert.ToBase64String(byteArray);
                    lawyers.ImageUrl = $"data:{format};base64,{base64}";
                }
            }

            var user = new Lawyers
                {
                    UserName = lawyers.Email,
                    Email = lawyers.Email,
                    FirstName = lawyers.FirstName,
                    LastName = lawyers.LastName,
                    City = lawyers.City,
                    Country = lawyers.Country,
                    Phone = lawyers.Phone,
                    CaseWinPercentage = lawyers.CaseWinPercentage,
                    CaseType = lawyers.CaseType,
                    ExperienceYears = lawyers.ExperienceYears,
                    Age = lawyers.Age,
                    Gender = lawyers.Gender,
                    EmailConfirmed = true,
                    ImageUrl = lawyers.ImageUrl
                };

            var result = await _userManager.CreateAsync(user, password);

            if (result.Succeeded)
            {
                // Add to Team role
                var roleResult = await _userManager.AddToRoleAsync(user, "Team");
                if (!roleResult.Succeeded)
                {
                    snackbar.Add("Failed to add lawyer to Team role", Severity.Warning);
                }

                // Send email
                try
                {
                    await emailService.SendEmailAsync(user.Email, "Welcome to our App!",
                        $"Thank you for signing up! Your Email Account has been registered with Us, you can login using the provided password: <strong>{password}</strong>", null);
                    snackbar.Add("Lawyer was added successfully and welcome email sent", Severity.Success);
                }
                catch (Exception emailEx)
                {
                    // If the email fails, still consider it a success, but notify about email failure
                    snackbar.Add("Lawyer was added successfully, but failed to send welcome email", Severity.Warning);
                    Console.WriteLine($"Email sending failed: {emailEx.Message}");
                }

                ToggleModal();
                lawyers = new Lawyers();
                password = string.Empty;
                imageFile = null;
            }
            else
            {
                foreach (var error in result.Errors)
                {
                    snackbar.Add(error.Description, Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception in Add method: {ex}");
            snackbar.Add("Operation failed. Try again later", Severity.Error);
        }
    }

    
    private void ToggleModal()
    {
        showModal = !showModal;
        if (!showModal)
        {
            lawyers = new Lawyers(); 
            password = string.Empty;
        }
    }

    private bool Searchrec(Lawyers lawyers)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (lawyers.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (lawyers.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (lawyers.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (lawyers.Phone.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        return false;
    }
}
