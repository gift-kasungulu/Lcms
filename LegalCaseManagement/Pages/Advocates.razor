@page "/advocates"
@attribute [Authorize(Roles = "Admin, Team")] 
@using LegalCaseManagement.Data
@using Microsoft.AspNetCore.Identity
@inject LawyerService lawyerService
@inject IJSRuntime jsRuntime
@inject ISnackbar snackbar
@inject UserManager<ApplicationUser> _userManager
@inject RoleManager<IdentityRole> _roleManager

<PageTitle>Advocates</PageTitle>

@if (showModal)
{
    <div class="modal fade show" tabindex="-1" style="display: block;">
        <div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Add Lawyer</h4>
                    <button type="button" class="btn-close" @onclick="ToggleModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="lawyers" OnValidSubmit="Add">
                        <div class="mb-3 mt-3">
                            <label class="form-label">First Name</label>
                            <input class="form-control" placeholder="Enter First Name" @bind-value="lawyers.LFirstName" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Last Name</label>
                            <input class="form-control" placeholder="Enter Last Name" @bind-value="lawyers.LLastName" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Phone Number</label>
                            <input class="form-control" placeholder="Enter Phone Number" @bind-value="lawyers.Phone" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Email</label>
                            <input class="form-control" placeholder="Enter Email" @bind-value="lawyers.Email" maxlength="255" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Country</label>
                            <input class="form-control" placeholder="Enter Country" @bind-value="lawyers.Country" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">City</label>
                            <input class="form-control" placeholder="Enter City" @bind-value="lawyers.City" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Age</label>
                            <input type="number" class="form-control" placeholder="Enter Age" @bind-value="lawyers.Age" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Case Type</label>
                            <input type="text" class="form-control" placeholder="Enter Case Type" @bind-value="lawyers.CaseType" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Experience Years</label>
                            <input type="number" class="form-control" placeholder="Enter Experience Years" @bind-value="lawyers.ExperienceYears" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Win Percentage</label>
                            <input type="number" class="form-control" placeholder="Enter Win Percentage" @bind-value="lawyers.CaseWinPercentage" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Password</label>
                            <input type="password" class="form-control" placeholder="Enter Password" @bind-value="password" />
                        </div>
                        <button type="submit" class="btn btn-primary">Submit</button>
                    </EditForm>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" @onclick="ToggleModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="ToggleModal">Add Advocate</MudButton>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudTable Items="lawyersList" Filter="new Func<Lawyers, bool>(Searchrec)" @bind-lawyersList="lawyersList">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Advocates</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchString" Placeholder="Search Here" IconSize="Size.Medium" StartIcon="@Icons.Material.Filled.Search" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>#</MudTh>
                <MudTh>FIRST NAME</MudTh>
                <MudTh>Last Name</MudTh>
                <MudTh>Email</MudTh>
                <MudTh>Phone</MudTh>
                <MudTh>Experience</MudTh>
                <MudTh>Win %</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Phone">@context.LawyerId</MudTd>
                <MudTd DataLabel="FirstName">@context.LFirstName</MudTd>
                <MudTd DataLabel="LastName">@context.LLastName</MudTd>
                <MudTd DataLabel="Email">@context.Email</MudTd>
                <MudTd DataLabel="Phone">@context.Phone</MudTd>
                <MudTd DataLabel="Experience">@context.ExperienceYears</MudTd>
                <MudTd DataLabel="Win">@context.CaseWinPercentage</MudTd>
                <MudTd DataLabel="Actions">
                    <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Edit" Size="Size.Small"/>
                    <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="@(() => DeleteRec(context))" />
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudCardContent>
</MudCard>

@code {
    private Lawyers lawyers = new Lawyers();
    private List<Lawyers> lawyersList = new List<Lawyers>();
    private bool showModal = false;
    private string searchString = "";
    private string password = "";

    protected override async Task OnInitializedAsync()
    {
        lawyersList = await lawyerService.GetAllAsync();
    }

    private async Task DeleteRec(Lawyers rec)
    {
        if (await lawyerService.DeleteAsync(rec))
        {
            lawyersList = await lawyerService.GetAllAsync();
            snackbar.Add("Lawyer was removed Successfully", Severity.Info);
        }
        else
        {
            snackbar.Add("Operation Failed. Try Again later", Severity.Error);
        }
    }

    public async Task Add()
    {
        try
        {
            var user = new ApplicationUser
            {
                UserName = lawyers.Email,
                Email = lawyers.Email,
                EmailConfirmed = true,
            };

            var passwordHash = _userManager.PasswordHasher.HashPassword(user, password);

            var result = await _userManager.CreateAsync(user);

            if (result.Succeeded)
            {
                user.PasswordHash = passwordHash;
                await _userManager.UpdateAsync(user);

                // Assign the "Team" role
                await _userManager.AddToRoleAsync(user, "Team");

                //lawyers.LawyerId = int.Parse(user.Id); 

                // Save the lawyer details in the database
                if (await lawyerService.AddAsync(lawyers))
                {
                    lawyersList = await lawyerService.GetAllAsync();
                    snackbar.Add("Lawyer Was Added Successfully", Severity.Success);
                    ToggleModal(); // Close the modal after adding

                    // Reset the lawyers object
                    lawyers = new Lawyers();
                    password = string.Empty; // Reset the password field
                }
                else
                {
                    snackbar.Add("Failed to add lawyer to database", Severity.Error);
                }
            }
            else
            {
                foreach (var error in result.Errors)
                {
                    snackbar.Add(error.Description, Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            snackbar.Add("Operation Failed. Try Again later", Severity.Error);
        }
    }

    private void ToggleModal()
    {
        showModal = !showModal;
        if (!showModal)
        {
            lawyers = new Lawyers(); // Reset the form when closing the modal
            password = string.Empty; // Reset the password field
        }
    }

    private bool Searchrec(Lawyers lawyers)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (lawyers.LFirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (lawyers.LLastName.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (lawyers.Email.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        if (lawyers.Phone.Contains(searchString, StringComparison.OrdinalIgnoreCase)) return true;
        return false;
    }
}
