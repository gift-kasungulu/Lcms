@page "/notifications"

@attribute [Authorize(Roles = "Admin, Client, Team")]

@using LegalCaseManagement.Data
@using LegalCaseManagement.Service
@using LegalCaseManagement.Domain
@using Microsoft.AspNetCore.Identity
@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject AppointmentService AppointmentService
@inject NotificationService NotificationService
@inject NavigationManager Navigation

<PageTitle>Notifications</PageTitle>

<MudGrid>
    <MudItem xs="12">
        <MudText Typo="Typo.h5">Notifications</MudText>
    </MudItem>
</MudGrid>
<MudDivider Class="my-2" />

<MudList Dense="true">
    @foreach (var notification in notifications)
    {
        <MudListItem>
            <MudGrid>
                <MudItem xs="10">
                    <MudText Typo="Typo.body1">@notification.Message</MudText>
                </MudItem>
                <MudItem xs="2" Class="d-flex justify-end">
                    <MudText Typo="Typo.caption">@notification.CreatedAt.ToLocalTime().ToString("g")</MudText>
                </MudItem>
            </MudGrid>
            <MudButton Color="Color.Primary" OnClick="@(() => MarkAsRead(notification.Id))">Mark as Read</MudButton>
        </MudListItem>
        <MudDivider />
    }
</MudList>

@if (isAdmin)
{
    <MudText Typo="Typo.h6" Class="mt-4">Pending Appointments</MudText>
    <MudList Dense="true">
        @foreach (var appointment in appointments)
        {
            <MudListItem>
                <MudGrid>
                    <MudItem xs="10">
                        <MudText Typo="Typo.body1">@notificationMessages[appointment.Id]</MudText>
                    </MudItem>
                    <MudItem xs="2" Class="d-flex justify-end">
                        <MudText Typo="Typo.caption">@appointment.Date.ToShortDateString()</MudText>
                    </MudItem>
                </MudGrid>
                <MudButton Color="Color.Success" OnClick="@(() => ApproveAppointment(appointment.Id))">Approve</MudButton>
            </MudListItem>
            <MudDivider />
        }
    </MudList>
}
else
{
    <MudText Typo="Typo.h6" Class="mt-4">Approved Appointments</MudText>
    <MudList Dense="true">
        @foreach (var appointment in appointments)
        {
            <MudListItem>
                <MudGrid>
                    <MudItem xs="10">
                        <MudText Typo="Typo.body1">@notificationMessages[appointment.Id]</MudText>
                    </MudItem>
                    <MudItem xs="2" Class="d-flex justify-end">
                        <MudText Typo="Typo.caption">@appointment.Date.ToShortDateString()</MudText>
                    </MudItem>
                </MudGrid>
            </MudListItem>
            <MudDivider />
        }
    </MudList>
}

@code {
    private List<Appointment> appointments = new List<Appointment>();
    private Dictionary<int, string> notificationMessages = new Dictionary<int, string>();
    private List<Notification> notifications = new List<Notification>();
    private bool isAdmin = false;

    protected override async Task OnInitializedAsync()
    {
        var user = await UserManager.GetUserAsync(SignInManager.Context.User);
        if (user == null)
        {
            return;
        }

        var roles = await UserManager.GetRolesAsync(user);
        isAdmin = roles.Contains("Admin");

        if (isAdmin)
        {
            appointments = (await AppointmentService.GetPendingAppointments()).ToList();
        }
        else if (roles.Contains("Team"))
        {
            appointments = (await AppointmentService.GetAppointmentsByTeamMember(user.Id)).ToList();
        }
        else if (roles.Contains("Client"))
        {
            appointments = (await AppointmentService.GetAppointmentsByClient(user.Id)).ToList();
        }

        await LoadNotificationMessages();
        notifications = await NotificationService.GetUnreadNotificationsForUser(user.Id);
    }

    private async Task LoadNotificationMessages()
    {
        foreach (var appointment in appointments)
        {
            var message = await GetNotificationMessage(appointment);
            notificationMessages[appointment.Id] = message;
        }
    }

    private async Task<string> GetNotificationMessage(Appointment appointment)
    {
        var creator = await UserManager.FindByIdAsync(appointment.CreatedBy);
        if (creator == null)
        {
            return $"Appointment on {appointment.Date.ToShortDateString()} (creator not found)";
        }
        var roles = await UserManager.GetRolesAsync(creator);
        if (roles.Contains("Client"))
        {
            return $"Appointment with Client {creator.UserName} on {appointment.Date.ToShortDateString()}";
        }
        else if (roles.Contains("Team"))
        {
            return $"Appointment with Lawyer {creator.UserName} on {appointment.Date.ToShortDateString()}";
        }
        else
        {
            return $"Appointment on {appointment.Date.ToShortDateString()}";
        }
    }

    private async Task MarkAsRead(int notificationId)
    {
        await NotificationService.MarkAsRead(notificationId);
        notifications = notifications.Where(n => n.Id != notificationId).ToList();
        StateHasChanged();
    }

    private async Task ApproveAppointment(int appointmentId)
    {
        await AppointmentService.ApproveAppointment(appointmentId);
        appointments = appointments.Where(a => a.Id != appointmentId).ToList();
        StateHasChanged();
    }
}
