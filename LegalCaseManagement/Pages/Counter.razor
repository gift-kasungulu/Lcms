@page "/counter"
@* @attribute [Authorize(Roles = "Admin")]  *@

@using LegalCaseManagement.Domain
@using LegalCaseManagement.Service
@using LegalCaseManagement.Data
@using Microsoft.AspNetCore.Mvc.Rendering
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@inject IJSRuntime jstRuntime
@inject UserManager<ApplicationUser> _userManager
@inject SignInManager<ApplicationUser> _signInManager
@inject ISnackbar snackbar
@inject AppUserService userService
@inject IServiceScopeFactory ServiceScopeFactory
@inject EmailService emailService
@inject LawyerService lawyerService
@inject NavigationManager NavigationManager
@inject EmailService EmailService 

<PageTitle>User Management</PageTitle>

@if (showModal)
{
<div class="modal-overlay">
    <div class="modal-container">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add User</h5>
                <button type="button" class="close-button" @onclick="ToggleModal">&times;</button>
            </div>
            <div class="modal-body">
                <EditForm Model="newUser" OnValidSubmit="AddNewUserWithRoles">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="mb-3">
                        <label class="form-label">First Name</label>
                        <input class="form-control" placeholder="Enter First Name" @bind-value="newUser.FirstNameUser" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Last Name</label>
                        <input class="form-control" placeholder="Enter Last Name" @bind-value="newUser.LastNameUser" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Email</label>
                        <input class="form-control" placeholder="Enter Email Address" @bind-value="newUser.LoginName" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Phone Number</label>
                        <input class="form-control" placeholder="Enter Phone Number" @bind-value="newUser.Phone" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Country</label>
                        <input class="form-control" placeholder="Enter Country" @bind-value="newUser.CountryUser" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">City</label>
                        <input class="form-control" placeholder="Enter City" @bind-value="newUser.CityUser" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Address</label>
                        <input class="form-control" placeholder="Enter Address" @bind-value="newUser.AddressUser" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Password</label>
                        <input type="password" class="form-control" placeholder="Enter Password" @bind-value="newUser.LoginPassword" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Role</label>
                        <InputSelect class="form-control" @bind-Value="newUser.UserRole" placeholder="Select Role">
                            @foreach (var role in selectList)
                                {
                                    <option value="@role.Value" selected="@role.Selected">@role.Text</option>
                                }
                            </InputSelect>
                        </div>
                    <button type="submit" class="submit-button">Submit</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>
}
<div class="my-3">
    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="ToggleModal">Add User</MudButton>
</div>
       
        <br />
        <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
            <MudTabPanel Text="Clients">
                <MudTable Items="userList" Filter="new Func<ApplicationUser,bool>(Search)" @bind-userList="userList">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">System Users</MudText>
                        <MudSpacer />
                        <MudTextField @bind-Value="searchString" Placeholder="Search Here" IconSize="Size.Medium"
                            StartIcon="@Icons.Material.Filled.Search" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>FIRST NAME</MudTh>
                        <MudTh>Last Name</MudTh>
                        <MudTh>Email</MudTh>
                        <MudTh>Phone</MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="First fName">@context.FirstName</MudTd>
                        <MudTd DataLabel="lName">@context.LastName</MudTd>
                        <MudTd DataLabel="Email">@context.Email</MudTd>
                        <MudTd DataLabel="Phone">@context.PhoneNumber</MudTd>
                        <MudTd DataLabel="Actions">
                        <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                            <MudMenuItem>
                                <i class="bi bi-eye"></i>
                                View
                            </MudMenuItem>
                        <MudMenuItem OnClick="@(() => NavigateToEditPage(context.Id))">
                                <i class="bi bi-pencil-fill"></i>
                                Edit
                            </MudMenuItem>
                            <MudMenuItem OnClick="@(()=>DeleteRec(context))">
                                <i class="bi bi-trash-fill"></i>
                                Delete
                            </MudMenuItem>
                        </MudMenu>
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            </MudTabPanel>
            <MudTabPanel Text="Team Members">
                <MudTable Items="lawyersList" Filter="new Func<Lawyers,bool>(Searchrec)"
                    @bind-lawyersList="lawyersList">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Advocates</MudText>
                        <MudSpacer />
                        <MudTextField @bind-Value="searchString" Placeholder="Search Here" IconSize="Size.Medium"
                            StartIcon="@Icons.Material.Filled.Search" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>

                        <MudTh>FIRST NAME</MudTh>
                        <MudTh>Last Name</MudTh>
                        <MudTh>Email</MudTh>
                        <MudTh>Phone</MudTh>
                        <MudTh>Experience</MudTh>
                        <MudTh>Win %</MudTh>

                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>

                        <MudTd DataLabel="FirstName">@context.FirstName</MudTd>
                        <MudTd DataLabel="LastName">@context.LastName</MudTd>
                        <MudTd DataLabel="Email">@context.UserName</MudTd>
                        <MudTd DataLabel="Phone">@context.Phone</MudTd>
                        <MudTd DataLabel="Experince">@context.ExperienceYears</MudTd>
                        <MudTd DataLabel="Win">@context.CaseWinPercentage</MudTd>

                        <MudTd DataLabel="Actions">

                    <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                    <MudMenuItem>
                        <i class="bi bi-eye"></i>
                        View
                    </MudMenuItem>
                    <MudMenuItem OnClick="@(() => NavigateToEditLawyerPage(context.Id))">
                        <i class="bi bi-pencil-fill"></i>
                        Edit
                    </MudMenuItem>
                    <MudMenuItem OnClick="@(() => DeleteRec(context))">
                        <i class="bi bi-trash-fill"></i>
                        Delete
                    </MudMenuItem>
                    </MudMenu>
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            </MudTabPanel>
    <MudTabPanel Text="Admins">
        <MudTable Items="adminList" Filter="new Func<ApplicationUser,bool>(SearchAdmin)" @bind-adminList="adminList">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Admin Users</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchStringAdmin" Placeholder="Search Here" IconSize="Size.Medium"
                              StartIcon="@Icons.Material.Filled.Search" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>FIRST NAME</MudTh>
                <MudTh>Last Name</MudTh>
                <MudTh>Email</MudTh>
                <MudTh>Phone</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="FirstName">@context.FirstName</MudTd>
                <MudTd DataLabel="LastName">@context.LastName</MudTd>
                <MudTd DataLabel="Email">@context.Email</MudTd>
                <MudTd DataLabel="Phone">@context.PhoneNumber</MudTd>
                <MudTd DataLabel="Actions">
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                        <MudMenuItem>
                            <i class="bi bi-eye"></i>
                            View
                        </MudMenuItem>
                        <MudMenuItem OnClick="@(() => NavigateToEditAdminPage(context.Id))">
                            <i class="bi bi-pencil-fill"></i>
                            Edit
                        </MudMenuItem>
                        <MudMenuItem OnClick="@(() => DeleteAdmin(context))">
                            <i class="bi bi-trash-fill"></i>
                            Delete
                        </MudMenuItem>
                    </MudMenu>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </MudTabPanel>
        </MudTabs>
        <br />
        <div class="row">
            <div class="col-md-6">
                <MudCard Class="mb-4">
                    <MudCardHeader Class=" mud-text-dark">
                        <h5 class="card-title">Roles</h5>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudTable Items="roles" Dense="true" Hover="true">
                            <HeaderContent>
                                <MudTh>Role Name</MudTh>
                                <MudTh>Actions</MudTh>
                            </HeaderContent>
                            <RowTemplate>

                                <MudTd DataLabel="Role Name">@context.Name</MudTd>

                                <MudTd>
                                    <MudFab Color="Color.Info" StartIcon="@Icons.Material.Filled.Edit" Size="Size.Small"
                                        OnClick="@(() => EditRole(context))" />

                                    <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Delete"
                                        Size="Size.Small" OnClick="@(() => DeleteRole(context))" />

                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudCardContent>
                </MudCard>
            </div>
            <div class="col-md-6">
                <MudCard Class="mb-4">
                    <MudCardHeader Class=" mud-text-dark">
                        <h5 class="card-title">Add Role</h5>
                    </MudCardHeader>
                    <MudCardContent>
                        <EditForm Model="newRole" OnValidSubmit="SubmitForm">
                            <div class="mb-3">
                                <label class="form-label">Role Name</label>
                                <MudTextField Label="Role Name" @bind-Value="newRole.Name" Required="true" />
                            </div>

                            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled">Add
                                Role</MudButton>

                        </EditForm>
                    </MudCardContent>
                </MudCard>
            </div>
        </div>

        @if (editRole != null)



        {
            <MudDialog @bind-Open="isEditDialogOpen">
                <DialogContent>
                    <MudText Typo="Typo.h6">Edit Role</MudText>
                    <MudTextField Label="Role Name" @bind-Value="editRole.Name" Required="true" />
                </DialogContent>
                <DialogActions>
                    <MudButton Color="Color.Info" Variant="Variant.Filled" OnClick="@(async () => await SaveEdit())">Save
                    </MudButton>
                    <MudButton Color="Color.Default" Variant="Variant.Outlined" OnClick="CloseEditDialog">Cancel</MudButton>
                </DialogActions>
            </MudDialog>
        }

@code {
    private string searchString = "";
    User newUser = new User();
    List<Role> rolesList = new List<Role>();
    List<SelectListItem> selectList = new List<SelectListItem>();
    List<User> MyUser = new List<User>();
    List<ApplicationUser> userList = new List<ApplicationUser>();
    ApplicationUser appUsers = new ApplicationUser();
    private bool showModal = false;
    private List<IdentityRole> roles = new List<IdentityRole>();
    private IdentityRole newRole = new IdentityRole();
    private IdentityRole editRole = new IdentityRole();
    private MudForm form;
    private bool isEditDialogOpen = false;
    private List<Lawyers> lawyersList = new List<Lawyers>();
    private List<ApplicationUser> adminList = new List<ApplicationUser>();
    private string searchStringAdmin = "";

    private bool Search(ApplicationUser applicationUser)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (applicationUser.UserName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

    private void NavigateToEditLawyerPage(string lawyerId)
    {
        NavigationManager.NavigateTo($"/editlawyer/{lawyerId}");
    }

    private bool Searchrec(Lawyers lawyer)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (lawyer.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

    private void NavigateToEditPage(string userId)
    {
        NavigationManager.NavigateTo($"/edit/{userId}");
    }

    public void Update(ApplicationUser userRecord)
    {
        ToggleModal();
        appUsers = userRecord;
        StateHasChanged();
    }

    private async Task DeleteLawyer(Lawyers lawyer)
    {
        bool confirmDelete = await jstRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this lawyer?");
        if (confirmDelete)
        {
            var result = await lawyerService.DeleteAsync(lawyer);
            if (result)
            {
                lawyersList.Remove(lawyer);
                snackbar.Add("Lawyer was removed successfully", Severity.Success);
                StateHasChanged();
            }
            else
            {
                snackbar.Add("Failed to remove lawyer", Severity.Error);
            }
        }
    }

    private List<ApplicationUser> GetAll()
    {
        userList = userService.GetAll();
        StateHasChanged();
        return userList;
    }

    private void ToggleModal()
    {
        newUser = new User();

        showModal = !showModal;
        if (!showModal)
        {
            newUser = new User();
        }
    }


    //delete method (user rec)
    private async Task DeleteRec(ApplicationUser rec)
    {
        bool confimUserRemoval = await jstRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to Remove user ?");
        if (confimUserRemoval)
        {
            userService.Delete(rec);
            userList = await GetAllClients();
            await jstRuntime.InvokeVoidAsync("alert", "User Removed succefully");

        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadUsersAndRoles();
        userList = await GetAllClients();
        lawyersList = await lawyerService.GetAllAsync();
        await LoadAdmins();

        rolesList = new List<Role>()
    {
        new Role(){RoleName = "Admin", ID = "1"},
        new Role(){RoleName = "Team", ID = "2"},
        new Role(){RoleName = "Client", ID = "3"}
    };

        selectList = rolesList.Select(role => new SelectListItem()
            {
                Text = role.RoleName,
                Value = role.ID,
                Selected = role.RoleName == "Client"
            }).ToList();

        // to ensure at least one role is selected when my list is empty i set the first Role on the list

        if (!selectList.Any(item => item.Selected))
        {
            var firstItem = selectList.FirstOrDefault();
            if (firstItem != null)
            {
                firstItem.Selected = true;
            }
        }
    }

    private async Task LoadAdmins()
    {
        var allUsers = await userService.GetAllAsync();
        adminList = new List<ApplicationUser>();

        foreach (var user in allUsers)
        {
            if (await _userManager.IsInRoleAsync(user, "Admin"))
            {
                adminList.Add(user);
            }
        }
    }

    // Method to filter Admins
    private bool SearchAdmin(ApplicationUser adminUser)
    {
        if (string.IsNullOrWhiteSpace(searchStringAdmin)) return true;
        if (adminUser.UserName.Contains(searchStringAdmin, StringComparison.OrdinalIgnoreCase) ||
            adminUser.FirstName.Contains(searchStringAdmin, StringComparison.OrdinalIgnoreCase) ||
            adminUser.LastName.Contains(searchStringAdmin, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

    // Method to navigate to the Admin edit page
    private void NavigateToEditAdminPage(string adminId)
    {
        NavigationManager.NavigateTo($"/editadmin/{adminId}");
    }

    // Method to delete an Admin
    private async Task DeleteAdmin(ApplicationUser adminUser)
    {
        bool confirmDelete = await jstRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this admin?");
        if (confirmDelete)
        {
            var result = await _userManager.DeleteAsync(adminUser);
            if (result.Succeeded)
            {
                adminList.Remove(adminUser);
                snackbar.Add("Admin was removed successfully", Severity.Success);
                StateHasChanged();
            }
            else
            {
                snackbar.Add("Failed to remove admin", Severity.Error);
            }
        }
    }

    private async Task<List<ApplicationUser>> GetAllClients()
    {
        var allUsers = await userService.GetAllAsync();

        var clients = new List<ApplicationUser>();
        foreach (var user in allUsers)

        {
            if (await _userManager.IsInRoleAsync(user, "Client"))
            {
                clients.Add(user);
            }
        }
        return clients;
    }

    private async Task LoadUsersAndRoles()
    {
        try
        {
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var roleManager = scope.ServiceProvider.GetRequiredService<RoleManager<IdentityRole>>();
                // Fetch roles here
                roles = roleManager.Roles.ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception in LoadUsersAndRoles: {ex}");
            throw;
        }
    }

    private async Task SubmitForm()
    {
        using (var scope = ServiceScopeFactory.CreateScope())
        {
            var roleManager = scope.ServiceProvider.GetRequiredService<RoleManager<IdentityRole>>();
            var result = await roleManager.CreateAsync(new IdentityRole(newRole.Name));
            if (result.Succeeded)
            {
                roles.Add(new IdentityRole { Name = newRole.Name, NormalizedName = newRole.Name.ToUpper() });
                newRole = new IdentityRole();
                snackbar.Add("The Role Was Added Successfuly", Severity.Success);
            }
            else
            {
                Console.WriteLine("Error creating role.");
            }
        }
    }

    private async Task EditRole(IdentityRole role)
    {
        editRole = role;
        isEditDialogOpen = true;

    }
    private async Task SaveEdit()
    {

        using (var scope = ServiceScopeFactory.CreateScope())

        {

            var roleManager = scope.ServiceProvider.GetRequiredService<RoleManager<IdentityRole>>();

            var role = await roleManager.FindByIdAsync(editRole.Id);
            if (role != null)
            {
                role.Name = editRole.Name;
                var result = await roleManager.UpdateAsync(role);
                if (result.Succeeded)
                {
                    var roleIndex = roles.FindIndex(r => r.Id == role.Id);

                    if (roleIndex != -1)

                    {
                        roles[roleIndex].Name = role.Name;

                        roles[roleIndex].NormalizedName = role.NormalizedName;


                    }
                    isEditDialogOpen = false;
                    editRole = null;

                }
                else
                {
                    Console.WriteLine("Error updating role.");
                }
            }
        }
    }

    private void CloseEditDialog()
    {
        isEditDialogOpen = false;
        editRole = null;
    }

    private async Task DeleteRole(IdentityRole role)
    {
        bool comfirmDelete = await jstRuntime.InvokeAsync<bool>("comfirm", "Are you sure you want to delete rRole ?");
        if (comfirmDelete)
        {
            using (var scope = ServiceScopeFactory.CreateScope())
            {
                var roleManager = scope.ServiceProvider.GetRequiredService<RoleManager<IdentityRole>>();
                var result = await roleManager.DeleteAsync(role);
                if (result.Succeeded)
                {
                    roles.Remove(role);
                    snackbar.Add("Role was Removed", Severity.Error);
                }
                else
                {
                    Console.WriteLine("Error deleting role.");
                }
            }
        }
    }


    public async void AddNewUserWithRoles(EditContext context)
    {
        var usermodel = context.Model as User;
        var passwordHash = _userManager.PasswordHasher.HashPassword(null, usermodel.LoginPassword);
        var user = new ApplicationUser
            {
                UserName = usermodel.LoginName,
                Email = usermodel.LoginName,
                EmailConfirmed = true,
                PhoneNumber = usermodel.Phone,
                City = usermodel.CityUser,
                Country = usermodel.CountryUser,
                Address = usermodel.AddressUser,
                FirstName = usermodel.FirstNameUser,
                LastName = usermodel.LastNameUser,
                PasswordHash = passwordHash
            };

        try
        {
            var result = await _userManager.CreateAsync(user, usermodel.LoginPassword);
            if (result.Succeeded)
            {
                var getRoleFromList = rolesList.FirstOrDefault(x => x.ID == usermodel?.UserRole);
                var roleAddedResult = await _userManager.AddToRoleAsync(user, getRoleFromList?.RoleName ?? "Client");

                if (roleAddedResult.Succeeded)
                {
                    // Send email notification to the new user

                    var subject = "Welcome to Legal Case Management System";
                    var body = $"Dear {user.FirstName} {user.LastName},<br><br>" +
                               $"You have been successfully added to the Legal Case Management System.<br>" +
                               $"Your login username is: {user.UserName}<br><br>" +
                               $"Please log in to the system to get started.<br><br>" +
                               $"Best regards,<br>Legal Case Management System";

                    try
                    {
                        await EmailService.SendEmailAsync(user.Email, subject, body);
                        snackbar.Add("User was added successfully with role, and notification email sent.", Severity.Success);
                    }
                    catch (Exception ex)
                    {
                        snackbar.Add($"User was added successfully, but failed to send email: {ex.Message}", Severity.Warning);
                    }

                    newUser = new User();
                    ToggleModal();
                    return;
                }
                else
                {
                    snackbar.Add("Failed to assign role to user", Severity.Error);
                }
            }
            else
            {
                foreach (var error in result.Errors)
                {
                    snackbar.Add($"Error: {error.Description}", Severity.Error);
                }
            }
        }
        catch (Exception ex)
        {
            await jstRuntime.InvokeVoidAsync("console.error", ex.Message);
            snackbar.Add("An error occurred during user creation. Please try again later.", Severity.Error);
        }
    }




}