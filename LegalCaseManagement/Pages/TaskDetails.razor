@page "/myassignedtasks"
@attribute [Authorize(Roles = "Team")]

@using LegalCaseManagement.Service
@using LegalCaseManagement.Domain
@using LegalCaseManagement.Data
@using LegalCaseManagement.Data.LegalServices
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject UserManager<ApplicationUser> UserManager
@inject IServiceScopeFactory ServiceScopeFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject MyTaskService mytskService

<h3>Assigned Tasks</h3>

@if (assignedTasks == null)
{
    <p><em>Loading...</em></p>
}
else if (assignedTasks.Count == 0)
{
    <p>No tasks assigned yet.</p>
}
else
{
    <MudTabs>
        <MudTabPanel Text="In Progress">
            @if (inProgressTasks == null || inProgressTasks.Count == 0)
            {
                <p>No tasks in progress.</p>
            }
            else
            {
                <MudTable Items="inProgressTasks">
                    <ColGroup>
                        <col style="width: 100px;" />
                        <col />
                        <col />
                        <col />
                        <col style="width: 100px;" />
                    </ColGroup>
                    <HeaderContent>
                        <MudTh>Due Date</MudTh>
                        <MudTh>Description</MudTh>
                        <MudTh>Case</MudTh>
                        <MudTh>Priority</MudTh>
                        <MudTh>Status</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.DueDate?.ToString("dd MMM yyyy")</MudTd>
                        <MudTd>@context.Description</MudTd>
                        <MudTd>@context.Case?.Discription</MudTd>
                        <MudTd>@context.Priority?.Name</MudTd>
                        <MudTd>@context.Status?.Name</MudTd>
                        <MudTd>
                            <MudButton Variant="Variant.Outlined" Color="Color.Primary" @onclick="() => ViewTaskDetails(context.TaskId)">
                                View
                            </MudButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            }
        </MudTabPanel>
        <MudTabPanel Text="Completed">
            @if (completedTasks == null || completedTasks.Count == 0)
            {
                <p>No completed tasks.</p>
            }
            else
            {
                <MudTable Items="completedTasks">
                    <ColGroup>
                        <col style="width: 100px;" />
                        <col />
                        <col />
                        <col />
                        <col style="width: 100px;" />
                    </ColGroup>
                    <HeaderContent>
                        <MudTh>Due Date</MudTh>
                        <MudTh>Description</MudTh>
                        <MudTh>Case</MudTh>
                        <MudTh>Priority</MudTh>
                        <MudTh>Status</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>@context.DueDate?.ToString("dd MMM yyyy")</MudTd>
                        <MudTd>@context.Description</MudTd>
                        <MudTd>@context.Case?.Discription</MudTd>
                        <MudTd>@context.Priority?.Name</MudTd>
                        <MudTd>@context.Status?.Name</MudTd>
                        <MudTd>
                            <MudButton Variant="Variant.Outlined" Color="Color.Primary" @onclick="() => ViewTaskDetails(context.TaskId)">
                                View
                            </MudButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            }
        </MudTabPanel>
    </MudTabs>
}

@code {
    private List<MyTask> assignedTasks;
    private List<MyTask> inProgressTasks;
    private List<MyTask> completedTasks;

    protected override async Task OnInitializedAsync()
    {
        var user = await GetCurrentUserAsync();
        if (user != null)
        {
            assignedTasks = await GetAssignedTasksAsync(user.Id);
            inProgressTasks = assignedTasks.Where(t => t.Status.Name == "In Progress").ToList();
            completedTasks = assignedTasks.Where(t => t.Status.Name == "Completed").ToList();
        }
    }

    private async Task<ApplicationUser> GetCurrentUserAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            return await UserManager.GetUserAsync(user);
        }

        return null;
    }

    private async Task<List<MyTask>> GetAssignedTasksAsync(string userId)
    {
        using (var scope = ServiceScopeFactory.CreateScope())
        {
            var context = scope.ServiceProvider.GetRequiredService<ApplicationDbContext>();
            return await context.MyTasks
                .Include(t => t.Priority)
                .Include(t => t.Status)
                .Include(t => t.Case)
                .Where(t => t.LawyerId == userId) // No need to convert userId to string as it's already a string
                .ToListAsync();
        }
    }

    private void ViewTaskDetails(int taskId)
    {
        Navigation.NavigateTo($"/taskdetails/{taskId}");
    }
}
