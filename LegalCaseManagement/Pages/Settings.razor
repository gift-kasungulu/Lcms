@page "/settings"
@attribute [Authorize(Roles = "Admin")] 

@using LegalCaseManagement.Data
@using LegalCaseManagement.Data.LegalServices
@inject LawyerService lawyerService
@inject IJSRuntime jstRuntime
@inject ISnackbar snackbar
@inject CaseTypeService caseTypeService
@inject CaseStatusService casestatusService

<PageTitle>Settings</PageTitle>

    <MudText Typo="Typo.h4" Class="mb-4">System Settings</MudText>

    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
        <MudTabPanel Text="Case Types">
            <MudPaper Elevation="0">
                <MudToolBar>
                    <MudText Typo="Typo.h6">Case Type Categories</MudText>
                    <MudSpacer />
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="ToggleModal">Add Case Type</MudButton>
                </MudToolBar>
                <MudTable Items="casetypeList" Dense="true" Hover="true" Elevation="0">
                    <HeaderContent>
                        <MudTh>ID</MudTh>
                        <MudTh>Name</MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Id">@context.CaseTypeId</MudTd>
                        <MudTd DataLabel="Case Type Name">@context.TypeName</MudTd>
                        <MudTd>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="@(() => Update(context))" />
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => DeleteType(context))" />
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </MudTabPanel>

        <MudTabPanel Text="Case Statuses">
            <MudPaper Elevation="0">
                <MudToolBar>
                    <MudText Typo="Typo.h6">Case Statuses</MudText>
                    <MudSpacer />
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="ToggleModalSecond">Add Case Status</MudButton>
                </MudToolBar>
                <MudTable Items="casestatusList" Dense="true" Hover="true" Elevation="0">
                    <HeaderContent>
                        <MudTh>ID</MudTh>
                        <MudTh>Name</MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Id">@context.StatusId</MudTd>
                        <MudTd DataLabel="Status Name">@context.StatusName</MudTd>
                        <MudTd>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="@(() => UpdateStatus(context))" />
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => DeleteRec(context))" />
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </MudTabPanel>
    </MudTabs>

<MudDialog @bind-IsVisible="showModal" Options="dialogOptions" MaxWidth="MaxWidth.Large" FullWidth="true">
    <TitleContent>
        <MudText Typo="Typo.h6">@(casetype.CaseTypeId == 0 ? "Add New Case Type" : "Edit Case Type")</MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="casetype.TypeName" Label="Type Name" Required="true" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="ToggleModal">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Add">@(casetype.CaseTypeId == 0 ? "Add" : "Update")</MudButton>
    </DialogActions>
</MudDialog>


<MudDialog @bind-IsVisible="showModalsecond" Options="dialogOptions" MaxWidth="MaxWidth.Large" FullWidth="true">
    <TitleContent>
        <MudText Typo="Typo.h6">@(casestatus.StatusId == 0 ? "Add New Case Status" : "Edit Case Status")</MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="casestatus.StatusName" Label="Status Name" Required="true" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="ToggleModalSecond">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="AddStatus">@(casestatus.StatusId == 0 ? "Add" : "Update")</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private CaseType casetype = new CaseType();
    private CaseStatus casestatus = new CaseStatus();
    private List<CaseStatus> casestatusList = new List<CaseStatus>();
    private List<CaseType> casetypeList = new List<CaseType>();
    private bool showModal = false;
    private bool showModalsecond = false;
    private bool isAddingType = false;
    private bool isAddingStatus = false;
    private bool isDeletingType = false;
    private bool isDeletingStatus = false;
    private DialogOptions dialogOptions = new DialogOptions { CloseOnEscapeKey = true };

    protected override async Task OnInitializedAsync()
    {
        await GetAll();
        await GetAllStatus();
    }

    private async Task GetAll()
    {
        casetypeList = await caseTypeService.GetAllAsync();
    }

    private async Task GetAllStatus()
    {
        casestatusList = await casestatusService.GetAllAsync();
    }

    private void ToggleModal()
    {
        showModal = !showModal;
    }

    private void ToggleModalSecond()
    {
        showModalsecond = !showModalsecond;
    }

   private async Task Add()
{
    try
    {
        // Check if CaseTypeId is not null or empty
        if (casetype.CaseTypeId == 0)
        {
            isAddingType = true;
            var success = await caseTypeService.AddAsync(casetype);
            if (success)
            {
                await GetAll();
                snackbar.Add("Case Type Was Added Successfully", Severity.Success);
            }
            else
            {
                caseTypeService.Update(casetype);
                snackbar.Add("Operation Failed. Try Again later", Severity.Error);
            }

        
        }
        else
        {
            snackbar.Add("Case Type ID cannot be null or empty.", Severity.Error);
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex.Message);
        snackbar.Add("Operation Failed. Try Again later", Severity.Error);
    }
    finally
    {
        isAddingType = false;
    }
}

    public void Update(CaseType casetypeRecord)
    {
        ToggleModal();
        casetype = casetypeRecord;
        StateHasChanged();
    }
    
   private async Task AddStatus()
{
    try
    {
        // Check if StatusId is not null or empty
        if (casestatus.StatusId == 0)
        {
            isAddingStatus = true;
            var success = await casestatusService.AddAsync(casestatus);
            if (success)
            {
                await GetAllStatus();
                snackbar.Add("Case Status Was Added Successfully", Severity.Success);
            }
            else
            {
                casestatusService.Update(casestatus);
                snackbar.Add("status updated ", Severity.Error);
            }
        }
        else
        {
            snackbar.Add("Operation Failed. Try Again later", Severity.Error);
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex.Message);
        snackbar.Add("Operation Failed. Try Again later", Severity.Error);
    }
    finally
    {
        isAddingStatus = false;
    }
}

     public void UpdateStatus(CaseStatus casestatusRecord)
    {
        ToggleModal();
        casestatus = casestatusRecord;
        StateHasChanged();
    }

    private async Task DeleteRec(CaseStatus rec)
    {
        try
        {
            isDeletingStatus = true;
            await casestatusService.DeleteAsync(rec);
            await GetAllStatus();
            snackbar.Add("Status was deleted", Severity.Success);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            snackbar.Add("Operation Failed. Try Again later", Severity.Error);
        }
        finally
        {
            isDeletingStatus = false;
        }
    }

    private async Task DeleteType(CaseType typerec)
    {
        try
        {
            isDeletingType = true;
            await caseTypeService.DeleteAsync(typerec);
            await GetAll();
            snackbar.Add("Type was removed", Severity.Success);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            snackbar.Add("Operation Failed. Try Again later", Severity.Error);
        }
        finally
        {
            isDeletingType = false;
        }
    }
}