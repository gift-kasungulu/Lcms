@page "/settings"
@attribute [Authorize(Roles = "Admin")] 

@using LegalCaseManagement.Data
@using LegalCaseManagement.Data.LegalServices
@using LegalCaseManagement.Domain
@using LegalCaseManagement.Service
@using LegalCaseManagement.Service.LegalServices
@inject LawyerService lawyerService
@inject IJSRuntime jstRuntime
@inject ISnackbar snackbar
@inject CaseTypeService caseTypeService
@inject CaseStatusService casestatusService
@inject WonOrLostCaseService WonOrLostCaseService 
@inject NoticeService noticeService

@inject MywonLostCasServicee mywonlostservice  

<PageTitle>Settings</PageTitle>

    <MudText Typo="Typo.h4" Class="mb-4">System Settings</MudText>

    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
        <MudTabPanel Text="Case Types">
            <MudPaper Elevation="0">
                <MudToolBar>
                    <MudText Typo="Typo.h6">Case Type Categories</MudText>
                    <MudSpacer />
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="ToggleModal">Add Case Type</MudButton>
                </MudToolBar>
                <MudTable Items="casetypeList" Dense="true" Hover="true" Elevation="0">
                    <HeaderContent>
                        <MudTh>ID</MudTh>
                        <MudTh>Name</MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Id">@context.CaseTypeId</MudTd>
                        <MudTd DataLabel="Case Type Name">@context.TypeName</MudTd>
                        <MudTd>
                            <MudIconButton Variant="Variant.Outlined" Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="@(() => Update(context))" />
                            <MudIconButton Variant="Variant.Outlined" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => DeleteType(context))" />
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </MudTabPanel>

        <MudTabPanel Text="Case Statuses">
            <MudPaper Elevation="0">
                <MudToolBar>
                    <MudText Typo="Typo.h6">Case Statuses</MudText>
                    <MudSpacer />
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="ToggleModalSecond">Add Case Status</MudButton>
                </MudToolBar>
                <MudTable Items="casestatusList" Dense="true" Hover="true" Elevation="0">
                    <HeaderContent>
                        <MudTh>ID</MudTh>
                        <MudTh>Name</MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Id">@context.StatusId</MudTd>
                        <MudTd DataLabel="Status Name">@context.StatusName</MudTd>
                        <MudTd>
                            <MudIconButton Variant="Variant.Outlined" Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="@(() => UpdateStatus(context))" />
                            <MudIconButton Variant="Variant.Outlined" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => DeleteRec(context))" />
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </MudTabPanel>

        <!-- won or lost case status  -->
    <MudTabPanel Text="Case Statuses (won\lost)">
        <MudGrid>
    <MudItem xs="12" sm="6" md="4">
                <MudTextField @bind-Value="myCaseWonOrLost.Name" Label="New Status Name" Variant="Variant.Outlined" Margin="Margin.Dense" />
    </MudItem>
    <MudItem xs="12" sm="6" md="4">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddWonOrLostStatus" Class="mt-2" FullWidth="true">
            Add Status (won\lost)
        </MudButton>
    </MudItem>
</MudGrid>

<MudDivider Class="my-4" />

        <MudTable Items="Winstatuses" Hover="true" Striped="true">
    
            <HeaderContent>
                <th>ID</th>
            <th>Name</th>
            <th>Actions</th>
            </HeaderContent>
            
            <RowTemplate>
                <MudTh>@context.WonLostId</MudTh>
                <MudTh>@context.Name</MudTh>
                <MudTh>
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@(() => EditStatus(context))">
                        Edit
                    </MudButton>
                    <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="@(() => DeleteStatus(context))">
                        Delete
                    </MudButton>
                </MudTh>

            </RowTemplate>

</MudTable>
    </MudTabPanel>

    </MudTabs>

<MudDialog @bind-IsVisible="showModal" Options="dialogOptions" MaxWidth="MaxWidth.Large" FullWidth="true">
    <TitleContent>
        <MudText Typo="Typo.h6">@(casetype.CaseTypeId == 0 ? "Add New Case Type" : "Edit Case Type")</MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="casetype.TypeName" Label="Type Name" Required="true" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="ToggleModal">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Add">@(casetype.CaseTypeId == 0 ? "Add" : "Update")</MudButton>
    </DialogActions>
</MudDialog>


<MudDialog @bind-IsVisible="showModalsecond" Options="dialogOptions" MaxWidth="MaxWidth.Large" FullWidth="true">
    <TitleContent>
        <MudText Typo="Typo.h6">@(casestatus.StatusId == 0 ? "Add New Case Status" : "Edit Case Status")</MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="casestatus.StatusName" Label="Status Name" Required="true" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="ToggleModalSecond">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="AddStatus">@(casestatus.StatusId == 0 ? "Add" : "Update")</MudButton>
    </DialogActions>
</MudDialog>
<br />
<!-- handle adding of notices here  -->

<MudGrid>
    <MudItem xs="12" sm="6">
            <InputFile Class="my-5" OnChange="HandleFileSelected" />
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudTextField  Label="Notice Title" @bind-Value="newNotice.Title" FullWidth="true" />
    </MudItem>
    <MudItem xs="12" sm="6">
        <MudButton Color="Color.Primary" OnClick="AddNoticeAsync" Variant="Variant.Filled">Add Notice</MudButton>
    </MudItem>
</MudGrid>



<br />
<MudTable Items="notices" Striped="true" Hover="true">
    <HeaderContent>
        <MudTh>Notice Title</MudTh>
        
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Notice Title">@context.Title</MudTd>
        
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private CaseType casetype = new CaseType();
    private CaseStatus casestatus = new CaseStatus();
    private List<CaseStatus> casestatusList = new List<CaseStatus>();
    private List<CaseType> casetypeList = new List<CaseType>();
    private bool showModal = false;
    private bool showModalsecond = false;
    private bool isAddingType = false;
    private bool isAddingStatus = false;
    private bool isDeletingType = false;
    private bool isDeletingStatus = false;
    private DialogOptions dialogOptions = new DialogOptions { CloseOnEscapeKey = true };
    private MyCaseWonOrLost myCaseWonOrLost = new MyCaseWonOrLost();
    private List<MyCaseWonOrLost> statuses = new List<MyCaseWonOrLost>();
    private string newStatusName = string.Empty;
    private MyCaseWonOrLost statusToEdit = new MyCaseWonOrLost();
    private MyCaseWonOrLost winorlostcaes = new MyCaseWonOrLost();

    private Notice newNotice = new Notice();
    private List<Notice> notices = new List<Notice>(); // Declare the list here
    private byte[]? selectedFileContent;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using (var stream = file.OpenReadStream())
            {
                selectedFileContent = new byte[file.Size];
                await stream.ReadAsync(selectedFileContent);
            }
            newNotice.PdfFileContent = selectedFileContent;
            newNotice.PdfFileName = file.Name; // Store the file name
        }
    }


    private async Task AddNoticeAsync()
    {
        if (string.IsNullOrWhiteSpace(newNotice.Title) || selectedFileContent == null)
        {
            // Show validation error message to the user
            snackbar.Add("Please provide both a title and a file.", Severity.Error);
            return;
        }

        try
        {
            // Add the notice with the provided title and file content
            await noticeService.AddNoticeAsync(newNotice);
            // Refresh the notices list to show the newly added notice
            notices = await noticeService.GetAllNoticesAsync();
            // Reset the form fields
            newNotice = new Notice();
            selectedFileContent = null;
            snackbar.Add("Notice added successfully!", Severity.Success);
        }
        catch (Exception ex)
        {
            // Handle any errors that occur during the addition process
            snackbar.Add($"An error occurred while adding the notice: {ex.Message}", Severity.Error);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetAll();
        await GetAllStatus();
        await LoadStatuses();
        notices = await noticeService.GetAllNoticesAsync();

    }

    private async Task GetAll()
    {
        casetypeList = await caseTypeService.GetAllAsync();
    }

    private async Task GetAllStatus()
    {
        casestatusList = await casestatusService.GetAllAsync();
    }

    private void ToggleModal()
    {
        showModal = !showModal;
    }

    private void ToggleModalSecond()
    {
        showModalsecond = !showModalsecond;
    }

    private async Task Add()
    {
        try
        {
            // Check if CaseTypeId is not null or empty
            if (casetype.CaseTypeId == 0)
            {
                isAddingType = true;
                var success = await caseTypeService.AddAsync(casetype);
                if (success)
                {
                    await GetAll();
                    snackbar.Add("Case Type Was Added Successfully", Severity.Success);
                }
                else
                {
                    caseTypeService.Update(casetype);
                    snackbar.Add("Operation Failed. Try Again later", Severity.Error);
                }


            }
            else
            {
                snackbar.Add("Case Type ID cannot be null or empty.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            snackbar.Add("Operation Failed. Try Again later", Severity.Error);
        }
        finally
        {
            isAddingType = false;
        }
    }

    public void Update(CaseType casetypeRecord)
    {
        ToggleModal();
        casetype = casetypeRecord;
        StateHasChanged();
    }

    private async Task AddStatus()
    {
        try
        {
            // Check if StatusId is not null or empty
            if (casestatus.StatusId == 0)
            {
                isAddingStatus = true;
                var success = await casestatusService.AddAsync(casestatus);
                if (success)
                {
                    await GetAllStatus();
                    snackbar.Add("Case Status Was Added Successfully", Severity.Success);
                }
                else
                {
                    casestatusService.Update(casestatus);
                    snackbar.Add("status updated ", Severity.Error);
                }
            }
            else
            {
                snackbar.Add("Operation Failed. Try Again later", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            snackbar.Add("Operation Failed. Try Again later", Severity.Error);
        }
        finally
        {
            isAddingStatus = false;
        }
    }

    public void UpdateStatus(CaseStatus casestatusRecord)
    {
        ToggleModal();
        casestatus = casestatusRecord;
        StateHasChanged();
    }

    private async Task DeleteRec(CaseStatus rec)
    {
        try
        {
            isDeletingStatus = true;
            await casestatusService.DeleteAsync(rec);
            await GetAllStatus();
            snackbar.Add("Status was deleted", Severity.Success);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            snackbar.Add("Operation Failed. Try Again later", Severity.Error);
        }
        finally
        {
            isDeletingStatus = false;
        }
    }

    private async Task DeleteType(CaseType typerec)
    {
        try
        {
            isDeletingType = true;
            await caseTypeService.DeleteAsync(typerec);
            await GetAll();
            snackbar.Add("Type was removed", Severity.Success);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            snackbar.Add("Operation Failed. Try Again later", Severity.Error);
        }
        finally
        {
            isDeletingType = false;
        }
    }

    private List<MyCaseWonOrLost> Winstatuses = new List<MyCaseWonOrLost>();
    private string WinnewStatusName = string.Empty;
    private MyCaseWonOrLost WinstatusToEdit;



    private async Task LoadStatuses()
    {
        Winstatuses = await mywonlostservice.GetAllAsync();
    }

    private async Task AddWonOrLostStatus() //fix this 
    {
        try
        {
            if (winorlostcaes.WonLostId == 0)
            {
                var success = await mywonlostservice.AddAsync(winorlostcaes);

                if (success)
                {
                    snackbar.Add("won lost status added successfuly", Severity.Success);
                    await mywonlostservice.GetAllAsync();
                }
                else
                {
                    mywonlostservice.Update(winorlostcaes);
                    snackbar.Add("Operation Failed", Severity.Error);
                }
            }
            else
            {
                snackbar.Add("Failed to Add the Won Lost Status, is not null", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            snackbar.Add("Operation Failed. Try Again later", Severity.Error);
        }
        

        await WonOrLostCaseService.AddStatusAsync(myCaseWonOrLost);
        await LoadStatuses();
        snackbar.Add("Status added successfully", Severity.Success);
    }

    private void EditStatus(MyCaseWonOrLost status)
    {
        WinstatusToEdit = status;
        // You may want to open a dialog or navigate to an edit page
    }

    private async Task UpdateStatus()
    {
        if (WinstatusToEdit != null)
        {
            await WonOrLostCaseService.UpdateStatusAsync(WinstatusToEdit);
            snackbar.Add("Status updated successfully", Severity.Success);
            WinstatusToEdit = null;
            await LoadStatuses();
        }
    }

    private async Task DeleteStatus(MyCaseWonOrLost wonlost)
    {
        await mywonlostservice.DeleteAsync(wonlost);
        snackbar.Add("Status deleted successfully", Severity.Success);
        await LoadStatuses();
    }

}