@page "/settings"
@attribute [Authorize(Roles = "Admin")] 

@using LegalCaseManagement.Data
@using LegalCaseManagement.Data.LegalServices
@inject LawyerService lawyerService
@inject IJSRuntime jstRuntime
@inject ISnackbar snackbar
@inject CaseTypeService caseTypeService
@inject CaseStatusService casestatusService

<PageTitle>Settings</PageTitle>


@if (showModal)
{
    <div class="modal fade show" tabindex="-1" style="display: block;">
        <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Add Case Type/Category</h4>
                    <button type="button" class="btn-close" @onclick="ToggleModal"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="casetype" OnValidSubmit="Add">
                        
                        <div class="mb-3 mt-3">
                            <label class="form-label">Type Name</label>
                            <input class="form-control" placeholder="Enter Type Name" @bind-value="casetype.TypeName" />
                        </div>
                        <button type="submit" class="btn btn-primary">Submit</button>
                    </EditForm>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" @onclick="ToggleModal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

<!-- second modal here -->
@if (showModalsecond)
{
    <div class="modal fade show" tabindex="-1" style="display: block;">
        <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h4 class="modal-title">Add Case Status</h4>
                    <button type="button" class="btn-close" @onclick="ToggleModalSecond"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="casestatus" OnValidSubmit="AddStatus">
                       
                        <div class="mb-3 mt-3">
                            <label class="form-label">Status Name</label>
                            <input class="form-control" placeholder="Enter Status Name" @bind-value="casestatus.StatusName" />
                        </div>
                        <button type="submit" class="btn btn-primary">Submit</button>
                    </EditForm>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" @onclick="ToggleModalSecond">Close</button>
                </div>
            </div>
        </div>
    </div>
}

<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="ToggleModal">Add CaseType</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="ToggleModalSecond">Add CaseStatus</MudButton>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <div class="row">
            <!-- Case Type Categories -->
            <div class="col-md-6">
                <MudCard Class="mb-4">
                    <MudCardHeader Class="mud-theme-primary mud-text-white">
                        <h5 class="card-title">Case Type Categories</h5>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudTable Items="casetypeList" Dense="true" Hover="true">
                            <HeaderContent>
                                <MudTh>#</MudTh>
                                <MudTh> Name</MudTh>
                                <MudTh>Actions</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Id">@context.CaseTypeId</MudTd>
                                <MudTd DataLabel="Case Type Name">@context.TypeName</MudTd>
                                <MudTd>
                                    <MudFab Color="Color.Info" StartIcon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="@(()=>Update(context))" />
                                    <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="@(()=>DeleteType(context))" />
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudCardContent>
                </MudCard>
            </div>
            <!-- Case Status -->
            <div class="col-md-6">
                <MudCard Class="mb-4">
                    <MudCardHeader Class="mud-theme-primary mud-text-white">
                        <h5 class="card-title">Case Status</h5>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudTable Items="casestatusList" Dense="true" Hover="true">
                            <HeaderContent>
                                <MudTh>#</MudTh>
                                <MudTh> Name</MudTh>
                                <MudTh>Actions</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Id">@context.StatusId</MudTd>
                                <MudTd DataLabel="Status Name">@context.StatusName</MudTd>
                                <MudTd>
                                    <MudFab Color="Color.Info" StartIcon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="@(()=>UpdateStatus(context))"/>
                                    <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="@(()=>DeleteRec(context))" />
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                    </MudCardContent>
                </MudCard>
            </div>
        </div>
    </MudCardContent>
</MudCard>

@code {
    private CaseType casetype = new CaseType();
    private CaseStatus casestatus = new CaseStatus();
    private List<CaseStatus> casestatusList = new List<CaseStatus>();
    private List<CaseType> casetypeList = new List<CaseType>();
    private bool showModal = false;
    private bool showModalsecond = false;
    private bool isAddingType = false;
    private bool isAddingStatus = false;
    private bool isDeletingType = false;
    private bool isDeletingStatus = false;

    protected override async Task OnInitializedAsync()
    {
        await GetAll();
        await GetAllStatus();
    }

    private async Task GetAll()
    {
        casetypeList = await caseTypeService.GetAllAsync();
    }

    private async Task GetAllStatus()
    {
        casestatusList = await casestatusService.GetAllAsync();
    }

    private void ToggleModal()
    {
        showModal = !showModal;
    }

    private void ToggleModalSecond()
    {
        showModalsecond = !showModalsecond;
    }

   private async Task Add()
{
    try
    {
        // Check if CaseTypeId is not null or empty
        if (casetype.CaseTypeId == 0)
        {
            isAddingType = true;
            var success = await caseTypeService.AddAsync(casetype);
            if (success)
            {
                await GetAll();
                snackbar.Add("Case Type Was Added Successfully", Severity.Success);
            }
            else
            {
                caseTypeService.Update(casetype);
                snackbar.Add("Operation Failed. Try Again later", Severity.Error);
            }

        
        }
        else
        {
            snackbar.Add("Case Type ID cannot be null or empty.", Severity.Error);
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex.Message);
        snackbar.Add("Operation Failed. Try Again later", Severity.Error);
    }
    finally
    {
        isAddingType = false;
    }
}

    public void Update(CaseType casetypeRecord)
    {
        ToggleModal();
        casetype = casetypeRecord;
        StateHasChanged();
    }
    
   private async Task AddStatus()
{
    try
    {
        // Check if StatusId is not null or empty
        if (casestatus.StatusId == 0)
        {
            isAddingStatus = true;
            var success = await casestatusService.AddAsync(casestatus);
            if (success)
            {
                await GetAllStatus();
                snackbar.Add("Case Status Was Added Successfully", Severity.Success);
            }
            else
            {
                casestatusService.Update(casestatus);
                snackbar.Add("status updated ", Severity.Error);
            }
        }
        else
        {
            snackbar.Add("Operation Failed. Try Again later", Severity.Error);
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine(ex.Message);
        snackbar.Add("Operation Failed. Try Again later", Severity.Error);
    }
    finally
    {
        isAddingStatus = false;
    }
}

     public void UpdateStatus(CaseStatus casestatusRecord)
    {
        ToggleModal();
        casestatus = casestatusRecord;
        StateHasChanged();
    }

    private async Task DeleteRec(CaseStatus rec)
    {
        try
        {
            isDeletingStatus = true;
            await casestatusService.DeleteAsync(rec);
            await GetAllStatus();
            snackbar.Add("Status was deleted", Severity.Success);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            snackbar.Add("Operation Failed. Try Again later", Severity.Error);
        }
        finally
        {
            isDeletingStatus = false;
        }
    }

    private async Task DeleteType(CaseType typerec)
    {
        try
        {
            isDeletingType = true;
            await caseTypeService.DeleteAsync(typerec);
            await GetAll();
            snackbar.Add("Type was removed", Severity.Success);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            snackbar.Add("Operation Failed. Try Again later", Severity.Error);
        }
        finally
        {
            isDeletingType = false;
        }
    }
}