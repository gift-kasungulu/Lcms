@page "/earnings"
@using Stripe
@using Stripe.Checkout
@using System.ComponentModel.DataAnnotations

<PageTitle>Index</PageTitle>
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager

<h2>Generate Invoice</h2>

<EditForm Model="@invoiceModel" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="clientEmail">Client Email:</label>
        <InputText id="clientEmail" @bind-Value="invoiceModel.ClientEmail" class="form-control" />
    </div>

    <div class="form-group">
        <label for="amount">Amount (in cents):</label>
        <InputNumber id="amount" @bind-Value="invoiceModel.AmountInCents" class="form-control" />
    </div>

    <div class="form-group">
        <label for="description">Description:</label>
        <InputTextArea id="description" @bind-Value="invoiceModel.Description" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary">Generate Invoice</button>
</EditForm>

@code {
    private InvoiceModel invoiceModel = new InvoiceModel();

    private async Task HandleValidSubmit()
    {
        StripeConfiguration.ApiKey = Configuration["Stripe:SecretKey"];

        var options = new InvoiceCreateOptions
            {
                Customer = await GetOrCreateCustomer(invoiceModel.ClientEmail),
                CollectionMethod = "send_invoice",
                DaysUntilDue = 30,
            };

        var invoiceItemOptions = new InvoiceItemCreateOptions
            {
                Customer = options.Customer,
                Amount = invoiceModel.AmountInCents,
                Currency = "usd",
                Description = invoiceModel.Description,
            };

        var invoiceItemService = new InvoiceItemService();
        await invoiceItemService.CreateAsync(invoiceItemOptions);

        var service = new InvoiceService();
        var invoice = await service.CreateAsync(options);

        NavigationManager.NavigateTo($"/invoice/{invoice.Id}");
    }

    private async Task<string> GetOrCreateCustomer(string email)
    {
        var customerService = new CustomerService();
        var customers = await customerService.ListAsync(new CustomerListOptions { Email = email });

        if (customers.Any())
        {
            return customers.First().Id;
        }
        else
        {
            var customer = await customerService.CreateAsync(new CustomerCreateOptions { Email = email });
            return customer.Id;
        }
    }

    public class InvoiceModel
    {
        [Required]
        [EmailAddress]
        public string ClientEmail { get; set; }

        [Required]
        [Range(1, int.MaxValue, ErrorMessage = "Amount must be greater than 0")]
        public long AmountInCents { get; set; }

        [Required]
        public string Description { get; set; }
    }
}