@page "/tasksetting"
@attribute [Authorize(Roles = "Admin")]

@using LegalCaseManagement.Data
@using LegalCaseManagement.Data.LegalServices
@using LegalCaseManagement.Domain
@using LegalCaseManagement.Service
@inject LawyerService lawyerService
@inject IJSRuntime jstRuntime
@inject ISnackbar snackbar
@inject PriorityService priorityservice
@inject TaskStatusService taskstatusService
@inject MyTaskService mytaskservice

<PageTitle>Task Settings</PageTitle>

<MudText Typo="Typo.h4" Class="mb-4">Task Settings</MudText>

<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
    <MudTabPanel Text="Task Statuses">
        <MudPaper Elevation="0">
            <MudToolBar>
                <MudText Typo="Typo.h6">Task Status Categories</MudText>
                <MudSpacer />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="ToggleModal">Add Task Status</MudButton>
            </MudToolBar>
            <MudTable Items="taskStatusList" Dense="true" Hover="true" Elevation="0">
                <HeaderContent>
                    <MudTh>ID</MudTh>
                    <MudTh>Name</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Id">@context.StatusId</MudTd>
                    <MudTd DataLabel="Task Status Name">@context.Name</MudTd>
                    <MudTd>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="@(() => UpdateTaskStatus(context))" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => DeleteTaskStatus(context))" />
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudPaper>
    </MudTabPanel>

    <MudTabPanel Text="Priority Levels">
        <MudPaper Elevation="0">
            <MudToolBar>
                <MudText Typo="Typo.h6">Priority Levels</MudText>
                <MudSpacer />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="ToggleModalSecond">Add Priority Level</MudButton>
            </MudToolBar>
            <MudTable Items="priorityList" Dense="true" Hover="true" Elevation="0">
                <HeaderContent>
                    <MudTh>ID</MudTh>
                    <MudTh>Name</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Id">@context.PriorityId</MudTd>
                    <MudTd DataLabel="Priority Name">@context.Name</MudTd>
                    <MudTd>
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="@(() => UpdatePriority(context))" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => DeletePriority(context))" />
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudPaper>
    </MudTabPanel>
</MudTabs>

<MudDialog @bind-IsVisible="showModal" Options="dialogOptions" MaxWidth="MaxWidth.Large" FullWidth="true">
    <TitleContent>
        <MudText Typo="Typo.h6">@(taskstatus.StatusId == 0 ? "Add New Task Status" : "Edit Task Status")</MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="taskstatus.Name" Label="Task Name" Required="true" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="ToggleModal">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="AddTaskStatus">@(taskstatus.StatusId == 0 ? "Add" : "Update")</MudButton>
    </DialogActions>
</MudDialog>

<MudDialog @bind-IsVisible="showModalsecond" Options="dialogOptions" MaxWidth="MaxWidth.Large" FullWidth="true">
    <TitleContent>
        <MudText Typo="Typo.h6">@(priority.PriorityId == 0 ? "Add New Priority" : "Edit Priority")</MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="priority.Name" Label="Priority Name" Required="true" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="ToggleModalSecond">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="AddPriority">@(priority.PriorityId == 0 ? "Add" : "Update")</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private MyTaskStatus taskstatus = new MyTaskStatus();
    private Priority priority = new Priority();
    private List<MyTaskStatus> taskStatusList = new List<MyTaskStatus>();
    private List<Priority> priorityList = new List<Priority>();
    private bool showModal = false;
    private bool showModalsecond = false;
    private bool isAddingStatus = false;
    private bool isAddingPriority = false;
    private bool isDeletingStatus = false;
    private bool isDeletingPriority = false;
    private DialogOptions dialogOptions = new DialogOptions { CloseOnEscapeKey = true };

    protected override async Task OnInitializedAsync()
    {
        await GetAllTaskStatuses();
        await GetAllPriorities();
    }

    private async Task GetAllTaskStatuses()
    {
        taskStatusList = await taskstatusService.GetAllAsync();
    }

    private async Task GetAllPriorities()
    {
        priorityList = await priorityservice.GetAllAsync();
    }

    private void ToggleModal()
    {
        showModal = !showModal;
    }

    private void ToggleModalSecond()
    {
        showModalsecond = !showModalsecond;
    }

    private async Task AddTaskStatus()
    {
        try
        {
            if (taskstatus.StatusId == 0)
            {
                isAddingStatus = true;
                var success = await taskstatusService.AddAsync(taskstatus);
                if (success)
                {
                    await GetAllTaskStatuses();
                    snackbar.Add("Task Status was added", Severity.Success);
                }
                else
                {
                    taskstatusService.Update(taskstatus);
                    snackbar.Add("Task Status updated", Severity.Info);
                }
            }
            else
            {
                snackbar.Add("Operation failed. Please try again.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            snackbar.Add("Operation Failed. Try Again later", Severity.Error);
        }
        finally
        {
            isAddingStatus = false;
        }
    }

    private async Task AddPriority()
    {
        try
        {
            if (priority.PriorityId == 0)
            {
                isAddingPriority = true;
                var success = await priorityservice.AddAsync(priority);
                if (success)
                {
                    await GetAllPriorities();
                    snackbar.Add("Priority was added", Severity.Success);
                }
                else
                {
                    priorityservice.Update(priority);
                    snackbar.Add("Priority updated", Severity.Info);
                }
            }
            else
            {
                snackbar.Add("Operation failed. Please try again.", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            snackbar.Add("Operation Failed. Try Again later", Severity.Error);
        }
        finally
        {
            isAddingPriority = false;
        }
    }

    private void UpdateTaskStatus(MyTaskStatus taskStatusRecord)
    {
        ToggleModal();
        taskstatus = taskStatusRecord;
        StateHasChanged();
    }

    private void UpdatePriority(Priority priorityRecord)
    {
        ToggleModalSecond();
        priority = priorityRecord;
        StateHasChanged();
    }

    private async Task DeleteTaskStatus(MyTaskStatus rec)
    {
        try
        {
            isDeletingStatus = true;
            await taskstatusService.DeleteAsync(rec);
            await GetAllTaskStatuses();
            snackbar.Add("Task Status was deleted", Severity.Success);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            snackbar.Add("Operation Failed. Try Again later", Severity.Error);
        }
        finally
        {
            isDeletingStatus = false;
        }
    }

    private async Task DeletePriority(Priority rec)
    {
        try
        {
            isDeletingPriority = true;
            await priorityservice.DeleteAsync(rec);
            await GetAllPriorities();
            snackbar.Add("Priority was deleted", Severity.Success);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
            snackbar.Add("Operation Failed. Try Again later", Severity.Error);
        }
        finally
        {
            isDeletingPriority = false;
        }
    }
}
