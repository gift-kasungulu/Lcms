@page "/details/{LawyerId}"
@using LegalCaseManagement.Data
@using MailKit.Net.Smtp
@inject LawyerService lawyerService
@inject EmailService emailService
@inject NavigationManager Navigation
@inject IJSRuntime jstRuntime

@if (lawyer != null)
{
    <div class="container mt-4">
        <h6>Lawyer Details</h6>
        <table class="table">
            <tbody>
                <tr>
                    <td colspan="4" class="text-center">
                        @if (!string.IsNullOrEmpty(lawyer.ImageUrl))
                        {
                            <img src="@lawyer.ImageUrl" alt="Lawyer Image" class="rounded-circle" style="width: 150px; height: 150px;" />
                        }
                        else
                        {
                            <span>No image available</span>
                        }
                    </td>
                </tr>
                <tr>
                    <td><b>First Name</b></td>
                    <td>@lawyer.FirstName</td>
                    <td><b>Last Name</b></td>
                    <td>@lawyer.LastName</td>
                </tr>
                <tr>
                    <td><b>Email</b></td>
                    <td>@lawyer.UserName</td>
                    <td><b>Phone</b></td>
                    <td>@lawyer.Phone</td>
                </tr>
                <tr>
                    <td><b>Country</b></td>
                    <td>@lawyer.Country</td>
                    <td><b>City</b></td>
                    <td>@lawyer.City</td>
                </tr>
                <tr>
                    <td><b>Age</b></td>
                    <td>@lawyer.Age</td>
                    <td><b>Case Type</b></td>
                    <td>@lawyer.CaseType</td>
                </tr>
                <tr>
                    <td><b>Experience Years</b></td>
                    <td>@lawyer.ExperienceYears</td>
                    <td><b>Win Percentage</b></td>
                    <td>
                        <MudProgress Linear Value="@lawyer.CaseWinPercentage" Color="Color.Info" />
                        <span>@lawyer.CaseWinPercentage%</span>
                    </td>
                </tr>
            </tbody>
        </table>

        <h6>Request for Lawyer</h6>
        <EditForm Model="request" OnValidSubmit="HandleValidSubmit">
            <div class="mb-3">
                <label class="form-label">Your Email</label>
                <MudTextField @bind-Value="request.Email" />
            </div>
            <div class="mb-3">
                <label class="form-label">Message</label>
                <MudTextField @bind-Value="request.Message" TextArea="true" />
            </div>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary">Send</MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Secondary" @onclick="GoBack">Back</MudButton>
            
        </EditForm>
    </div>
}
else
{
    <p>Lawyer details not found.</p>
}



@code {
    [Parameter]
    public string LawyerId { get; set; }

    private Lawyers lawyer;
    private RequestModel request = new RequestModel();

    protected override async Task OnInitializedAsync()
    {
        lawyer = await lawyerService.GetByIdAsync(LawyerId);
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            await emailService.SendEmailAsync(request.Email, "Lawyer Request", request.Message, null);
            await jstRuntime.InvokeVoidAsync("alert", "Email sent successfully!");
        }
        catch (SmtpCommandException smtpEx)
        {
            await jstRuntime.InvokeVoidAsync("alert", $"SMTP error: {smtpEx.Message}");
        }
        catch (SmtpProtocolException protocolEx)
        {
            await jstRuntime.InvokeVoidAsync("alert", $"SMTP protocol error: {protocolEx.Message}");
        }
        catch (Exception ex)
        {
            await jstRuntime.InvokeVoidAsync("alert", $"An error occurred: {ex.Message}");
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }

    private class RequestModel
    {
        public string Email { get; set; }
        public string Message { get; set; }
    }
}
