@page "/lawyerdashboard"
@attribute [Authorize(Roles = "Team")]

@using LegalCaseManagement.Data
@using LegalCaseManagement.Domain
@using LegalCaseManagement.Service
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@inject LawyerService lawyerService
@inject CaseService caseService
@inject MyTaskService myTaskService 
@inject UserManager<ApplicationUser> userManager
@inject NavigationManager Navigation
@inject AuthenticationStateProvider authStateProvider
@inject NotificationService notificationService

    <MudPaper Class="pa-4 mb-4" Elevation="1">
        <MudText Typo="Typo.h4" Color="Color.Primary">Lawyer Dashboard</MudText>
        <MudDivider Class="my-2" />
        <MudGrid>
            <MudItem xs="12" sm="6" md="3">
                <MudPaper Class="pa-4" Elevation="3">
                    <MudText Typo="Typo.h6">Cases Created</MudText>
                    <MudText Typo="Typo.h4" Color="Color.Secondary">@casesCreatedCount</MudText>
                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => NavigateToCreatedCases()">View</MudButton>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudPaper Class="pa-4" Elevation="3">
                    <MudText Typo="Typo.h6">Cases Assigned</MudText>
                    <MudText Typo="Typo.h4" Color="Color.Secondary">@casesAssignedCount</MudText>
                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => NavigateToAssignedCases()">View</MudButton>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudPaper Class="pa-4" Elevation="3">
                    <MudText Typo="Typo.h6">Tasks Assigned</MudText>
                    <MudText Typo="Typo.h4" Color="Color.Secondary">@tasksAssignedCount</MudText>
                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => NavigateToAssignedTasks()">View</MudButton>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudPaper Class="pa-4" Elevation="3">
                    <MudText Typo="Typo.h6">Incomplete Tasks</MudText>
                    <MudText Typo="Typo.h4" Color="Color.Secondary">@tasksIncompleteCount</MudText>
                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => NavigateToIncompleteTasks()">View</MudButton>
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudPaper>

    <MudPaper Class="pa-4" Elevation="1">
        <MudText Typo="Typo.h5" Color="Color.Primary">Notifications</MudText>
        <MudDivider Class="my-2" />
        @if (notifications != null && notifications.Any())
        {
            <MudList Dense="true">
                @foreach (var notification in notifications)
                {
                    <MudListItem>
                        <MudGrid>
                            <MudItem xs="10">
                                <MudText Typo="Typo.body1">@notification.Message</MudText>
                            </MudItem>
                            <MudItem xs="2" Class="d-flex justify-end">
                                <MudText Typo="Typo.caption">@notification.CreatedAt.ToString("g")</MudText>
                            </MudItem>
                        </MudGrid>
                        <MudButton Color="Color.Secondary" OnClick="@(() => MarkAsRead(notification.Id))">Mark as Read</MudButton>
                    </MudListItem>
                    <MudDivider />
                }
            </MudList>
        }
        else
        {
            <MudText Typo="Typo.body1">No notifications</MudText>
        }
    </MudPaper>

@code {
    private int casesCreatedCount;
    private int casesAssignedCount;
    private int tasksAssignedCount;
    private int tasksIncompleteCount;
    private List<Notification> notifications = new List<Notification>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user?.Identity?.IsAuthenticated == true)
        {
            var userId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(userId))
            {
                notifications = await notificationService.GetNotificationsForUser(userId);
            }
        }

        var currentUser = await userManager.GetUserAsync(user);

        casesCreatedCount = await caseService.GetCasesCreatedCountByLawyerAsync(currentUser.Id);
        casesAssignedCount = await caseService.GetCasesAssignedCountByLawyerAsync(currentUser.Id);
        tasksAssignedCount = await myTaskService.GetTasksAssignedCountByLawyerAsync(currentUser.Id);
        tasksIncompleteCount = await myTaskService.GetIncompleteTasksCountByLawyerAsync(currentUser.Id);
    }

    private void NavigateToCreatedCases()
    {
        Navigation.NavigateTo("/created-cases");
    }

    private async Task MarkAsRead(int notificationId)
    {
        await notificationService.MarkAsRead(notificationId);
        notifications = notifications.Where(n => n.Id != notificationId).ToList();
        StateHasChanged();
    }

    private void NavigateToAssignedCases()
    {
        Navigation.NavigateTo("/assigned-cases");
    }

    private void NavigateToAssignedTasks()
    {
        Navigation.NavigateTo("/assigned-tasks");
    }

    private void NavigateToIncompleteTasks()
    {
        Navigation.NavigateTo("/incomplete-tasks");
    }
}
